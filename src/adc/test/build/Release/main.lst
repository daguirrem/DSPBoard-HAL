ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.startup.sys_clk_update,"ax",%progbits
  20              		.align	1
  21              		.p2align 2,,3
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	sys_clk_update:
  27              	.LFB130:
  28              		.file 1 "./include/system.h"
   1:./include/system.h **** /**
   2:./include/system.h ****  * @file system.h
   3:./include/system.h ****  * @author David A. Aguirre M. (daguirre.m@outlook.com)
   4:./include/system.h ****  * @brief System global includes and global macros / definitions / configs.
   5:./include/system.h ****  * @version d0.3
   6:./include/system.h ****  * @date 2022-05-02
   7:./include/system.h ****  * 
   8:./include/system.h ****  * @copyright MIT License, Copyright (c) 2022 David A. Aguirre M. @n @n
   9:./include/system.h ****  *
  10:./include/system.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
  11:./include/system.h ****  * of this software and associated documentation files (the "Software"), to deal
  12:./include/system.h ****  * in the Software without restriction, including without limitation the rights
  13:./include/system.h ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  14:./include/system.h ****  * copies of the Software, and to permit persons to whom the Software is
  15:./include/system.h ****  * furnished to do so, subject to the following conditions: @n @n
  16:./include/system.h ****  *
  17:./include/system.h ****  * The above copyright notice and this permission notice shall be included in all
  18:./include/system.h ****  * copies or substantial portions of the Software. @n @n
  19:./include/system.h **** 
  20:./include/system.h ****  * THE SOFTWARE IS PROVIDED  "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  21:./include/system.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  22:./include/system.h ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  23:./include/system.h ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  24:./include/system.h ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  25:./include/system.h ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  26:./include/system.h ****  * SOFTWARE.
  27:./include/system.h ****  * 
  28:./include/system.h ****  */
  29:./include/system.h **** 
  30:./include/system.h **** #ifndef _SYSTEM_H_
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 2


  31:./include/system.h **** #define _SYSTEM_H_
  32:./include/system.h **** 
  33:./include/system.h **** #include "delay.h"
  34:./include/system.h **** 
  35:./include/system.h **** #if defined(STM32F4xx)
  36:./include/system.h **** #include "stm32f4xx.h"
  37:./include/system.h **** #endif
  38:./include/system.h **** 
  39:./include/system.h **** #define __FORCE_INLINE  __attribute__((always_inline)) static inline
  40:./include/system.h **** 
  41:./include/system.h **** #define __CCM_VAR_I __attribute__((section(".ccmdata")))
  42:./include/system.h **** #define __CCM_VAR_U __attribute__((section(".ccmbss")))
  43:./include/system.h **** #define __RAM_FUNC  __attribute__((section(".ramFunc")))
  44:./include/system.h **** 
  45:./include/system.h **** #define __CONSTRUCTOR __attribute__((constructor))
  46:./include/system.h **** 
  47:./include/system.h **** #if !defined  (HSE_VALUE) 
  48:./include/system.h **** #define HSE_VALUE    ((uint32_t)8000000) /*!< Default value of the External oscillator in Hz */
  49:./include/system.h **** #endif /* HSE_VALUE */
  50:./include/system.h **** 
  51:./include/system.h **** #if !defined  (HSI_VALUE)
  52:./include/system.h **** #define HSI_VALUE    ((uint32_t)16000000) /*!< Value of the Internal oscillator in Hz*/
  53:./include/system.h **** #endif /* HSI_VALUE */
  54:./include/system.h **** 
  55:./include/system.h **** __CONSTRUCTOR
  56:./include/system.h **** __FORCE_INLINE void sys_clk_update()
  57:./include/system.h **** {
  29              		.loc 1 57 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  58:./include/system.h ****     SystemCoreClockUpdate();
  33              		.loc 1 58 5 view .LVU1
  57:./include/system.h ****     SystemCoreClockUpdate();
  34              		.loc 1 57 1 is_stmt 0 view .LVU2
  35 0000 08B5     		push	{r3, lr}
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
  39              		.loc 1 58 5 view .LVU3
  40 0002 FFF7FEFF 		bl	SystemCoreClockUpdate
  41              	.LVL0:
  59:./include/system.h ****     delay_init();
  42              		.loc 1 59 5 is_stmt 1 view .LVU4
  60:./include/system.h **** }
  43              		.loc 1 60 1 is_stmt 0 view .LVU5
  44 0006 BDE80840 		pop	{r3, lr}
  45              		.cfi_restore 14
  46              		.cfi_restore 3
  47              		.cfi_def_cfa_offset 0
  59:./include/system.h ****     delay_init();
  48              		.loc 1 59 5 view .LVU6
  49 000a FFF7FEBF 		b	delay_init
  50              	.LVL1:
  51              		.cfi_endproc
  52              	.LFE130:
  54 000e 00BF     		.section	.init_array,"aw",%init_array
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 3


  55              		.align	2
  56 0000 00000000 		.word	sys_clk_update(target1)
  57              		.section	.text.startup.main,"ax",%progbits
  58              		.align	1
  59              		.p2align 2,,3
  60              		.global	main
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  65              	main:
  66              	.LFB170:
  67              		.file 2 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****  * @file main.c
   3:src/main.c    ****  * @author David A. Aguirre M. (daguirre.m@outlook.com)
   4:src/main.c    ****  * @brief 
   5:src/main.c    ****  * @version d0.1
   6:src/main.c    ****  * @date 2022-05-02
   7:src/main.c    ****  * 
   8:src/main.c    ****  * @copyright MIT License, Copyright (c) 2022 David A. Aguirre M. @n @n
   9:src/main.c    ****  *
  10:src/main.c    ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
  11:src/main.c    ****  * of this software and associated documentation files (the "Software"), to deal
  12:src/main.c    ****  * in the Software without restriction, including without limitation the rights
  13:src/main.c    ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  14:src/main.c    ****  * copies of the Software, and to permit persons to whom the Software is
  15:src/main.c    ****  * furnished to do so, subject to the following conditions: @n @n
  16:src/main.c    ****  *
  17:src/main.c    ****  * The above copyright notice and this permission notice shall be included in all
  18:src/main.c    ****  * copies or substantial portions of the Software. @n @n
  19:src/main.c    **** 
  20:src/main.c    ****  * THE SOFTWARE IS PROVIDED  "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  21:src/main.c    ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  22:src/main.c    ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  23:src/main.c    ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  24:src/main.c    ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  25:src/main.c    ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  26:src/main.c    ****  * SOFTWARE.
  27:src/main.c    ****  * 
  28:src/main.c    ****  */
  29:src/main.c    **** 
  30:src/main.c    **** #include "system.h"
  31:src/main.c    **** #include "adc.h"
  32:src/main.c    **** #include "gpio.h"
  33:src/main.c    **** #include "delay.h"
  34:src/main.c    **** 
  35:src/main.c    **** int main (void)
  36:src/main.c    **** {
  68              		.loc 2 36 1 is_stmt 1 view -0
  69              		.cfi_startproc
  70              		@ Volatile: function does not return.
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  37:src/main.c    ****     gpio_clk_en(GPIOA_RCC);
  73              		.loc 2 37 5 view .LVU8
  74              	.LVL2:
  75              	.LBB32:
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 4


  76              	.LBI32:
  77              		.file 3 "./include/gpio.h"
   1:./include/gpio.h **** /**
   2:./include/gpio.h ****  * @file gpio.h
   3:./include/gpio.h ****  * @author David A. Aguirre M. (daguirre.m@outlook.com)
   4:./include/gpio.h ****  * @brief GPIO - Custom HAL for DSP Board SDK.
   5:./include/gpio.h ****  * @version d0.2
   6:./include/gpio.h ****  * @date 2022-04-30
   7:./include/gpio.h ****  * 
   8:./include/gpio.h ****  * @copyright MIT License, Copyright (c) 2022 David A. Aguirre M. @n @n
   9:./include/gpio.h ****  *
  10:./include/gpio.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
  11:./include/gpio.h ****  * of this software and associated documentation files (the "Software"), to deal
  12:./include/gpio.h ****  * in the Software without restriction, including without limitation the rights
  13:./include/gpio.h ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  14:./include/gpio.h ****  * copies of the Software, and to permit persons to whom the Software is
  15:./include/gpio.h ****  * furnished to do so, subject to the following conditions: @n @n
  16:./include/gpio.h ****  *
  17:./include/gpio.h ****  * The above copyright notice and this permission notice shall be included in all
  18:./include/gpio.h ****  * copies or substantial portions of the Software. @n @n
  19:./include/gpio.h **** 
  20:./include/gpio.h ****  * THE SOFTWARE IS PROVIDED  "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  21:./include/gpio.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  22:./include/gpio.h ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  23:./include/gpio.h ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  24:./include/gpio.h ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  25:./include/gpio.h ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  26:./include/gpio.h ****  * SOFTWARE.
  27:./include/gpio.h ****  * 
  28:./include/gpio.h ****  */
  29:./include/gpio.h **** 
  30:./include/gpio.h **** /**
  31:./include/gpio.h ****  * @todo Clock
  32:./include/gpio.h ****  *  * Reset ¿?
  33:./include/gpio.h ****  * @todo Aleternate function implementation.
  34:./include/gpio.h ****  */
  35:./include/gpio.h **** 
  36:./include/gpio.h **** #ifndef _GPIO_H_
  37:./include/gpio.h **** #define _GPIO_H_
  38:./include/gpio.h **** 
  39:./include/gpio.h **** #ifdef __cplusplus
  40:./include/gpio.h **** extern "C" {
  41:./include/gpio.h **** #endif
  42:./include/gpio.h **** 
  43:./include/gpio.h **** /**
  44:./include/gpio.h ****  * @addtogroup gpio GPIO
  45:./include/gpio.h ****  */
  46:./include/gpio.h **** 
  47:./include/gpio.h **** /**
  48:./include/gpio.h ****  * @defgroup public_gpio Public
  49:./include/gpio.h ****  * @ingroup gpio
  50:./include/gpio.h ****  */
  51:./include/gpio.h **** 
  52:./include/gpio.h **** #include "system.h"
  53:./include/gpio.h **** #include "rcc.h"
  54:./include/gpio.h **** 
  55:./include/gpio.h **** /*----------------------------------------------------------------------------*/
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 5


  56:./include/gpio.h **** /* Enums */
  57:./include/gpio.h **** /*----------------------------------------------------------------------------*/
  58:./include/gpio.h **** 
  59:./include/gpio.h **** /**
  60:./include/gpio.h ****  * @ingroup public_gpio
  61:./include/gpio.h ****  * @brief AHB1 GPIO clock mask.
  62:./include/gpio.h ****  * 
  63:./include/gpio.h ****  * GPIO mask on RCC->AHB1
  64:./include/gpio.h ****  */
  65:./include/gpio.h **** typedef enum {
  66:./include/gpio.h ****     GPIOA_RCC = RCC_AHB1_GPIOA, /*!< GPIOA enable clock mask */
  67:./include/gpio.h ****     GPIOB_RCC = RCC_AHB1_GPIOB, /*!< GPIOB enable clock mask */
  68:./include/gpio.h ****     GPIOC_RCC = RCC_AHB1_GPIOC, /*!< GPIOC enable clock mask */
  69:./include/gpio.h ****     GPIOD_RCC = RCC_AHB1_GPIOD, /*!< GPIOD enable clock mask */
  70:./include/gpio.h ****     GPIOE_RCC = RCC_AHB1_GPIOE, /*!< GPIOE enable clock mask */
  71:./include/gpio.h ****     GPIOF_RCC = RCC_AHB1_GPIOF, /*!< GPIOF enable clock mask */
  72:./include/gpio.h ****     GPIOG_RCC = RCC_AHB1_GPIOG, /*!< GPIOG enable clock mask */
  73:./include/gpio.h ****     GPIOH_RCC = RCC_AHB1_GPIOH, /*!< GPIOH enable clock mask */
  74:./include/gpio.h ****     GPIOI_RCC = RCC_AHB1_GPIOI  /*!< GPIOI enable clock mask */
  75:./include/gpio.h **** } gpio_rcc_t;
  76:./include/gpio.h **** 
  77:./include/gpio.h **** /**
  78:./include/gpio.h ****  * @ingroup public_gpio
  79:./include/gpio.h ****  * @brief GPIO pin mask.
  80:./include/gpio.h ****  * 
  81:./include/gpio.h ****  * Represents each GPIO pin (input/output).
  82:./include/gpio.h ****  */
  83:./include/gpio.h **** typedef enum {
  84:./include/gpio.h ****     GPIO_IO0   = 0x0001, /*!< IO0 mask */
  85:./include/gpio.h ****     GPIO_IO1   = 0x0002, /*!< IO1 mask */
  86:./include/gpio.h ****     GPIO_IO2   = 0x0004, /*!< IO2 mask */
  87:./include/gpio.h ****     GPIO_IO3   = 0x0008, /*!< IO3 mask */
  88:./include/gpio.h ****     GPIO_IO4   = 0x0010, /*!< IO3 mask */
  89:./include/gpio.h ****     GPIO_IO5   = 0x0020, /*!< IO4 mask */
  90:./include/gpio.h ****     GPIO_IO6   = 0x0040, /*!< IO5 mask */
  91:./include/gpio.h ****     GPIO_IO7   = 0x0080, /*!< IO6 mask */
  92:./include/gpio.h ****     GPIO_IO8   = 0x0100, /*!< IO7 mask */
  93:./include/gpio.h ****     GPIO_IO9   = 0x0200, /*!< IO8 mask */
  94:./include/gpio.h ****     GPIO_IO10  = 0x0400, /*!< IO9 mask */
  95:./include/gpio.h ****     GPIO_IO11  = 0x0800, /*!< IO10 mask */
  96:./include/gpio.h ****     GPIO_IO12  = 0x1000, /*!< IO11 mask */
  97:./include/gpio.h ****     GPIO_IO13  = 0x2000, /*!< IO12 mask */
  98:./include/gpio.h ****     GPIO_IO14  = 0x4000, /*!< IO13 mask */
  99:./include/gpio.h ****     GPIO_IO15  = 0x8000  /*!< IO14 mask */
 100:./include/gpio.h **** } gpio_io_t;
 101:./include/gpio.h **** 
 102:./include/gpio.h **** /**
 103:./include/gpio.h ****  * @ingroup public_gpio
 104:./include/gpio.h ****  * @brief GPIO configuration mask.
 105:./include/gpio.h ****  * 
 106:./include/gpio.h ****  * User defined mask to GPIO custom easy configuration.
 107:./include/gpio.h ****  * 
 108:./include/gpio.h ****  * @note 12 bit mask where: @n
 109:./include/gpio.h ****  *  0b CCCC x SS PP O MM
 110:./include/gpio.h ****  *  * C: Configurator mask bits
 111:./include/gpio.h ****  *  * S: Speed mask bits
 112:./include/gpio.h ****  *  * P: Pull mode mask bits
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 6


 113:./include/gpio.h ****  *  * O: Output mode mask bits
 114:./include/gpio.h ****  *  * M: GPIO mode mask bits
 115:./include/gpio.h ****  *  * x: none 
 116:./include/gpio.h ****  * 
 117:./include/gpio.h ****  * @note Refer product datasheet for max frequency on speed levels
 118:./include/gpio.h ****  *       pag. 117 - datasheet [Input/output AC characteristics].
 119:./include/gpio.h ****  */
 120:./include/gpio.h **** typedef enum {
 121:./include/gpio.h ****     GPIO_CONFIG_MODE_INPUT      = 0x100, /*!< GPIO input mode */
 122:./include/gpio.h ****     GPIO_CONFIG_MODE_OUTPUT     = 0x101, /*!< GPIO output mode */
 123:./include/gpio.h ****     GPIO_CONFIG_MODE_ALTERNATE  = 0x102, /*!< GPIO alternate mode */
 124:./include/gpio.h ****     GPIO_CONFIG_MODE_ANALOG     = 0x103, /*!< GPIO analog mode */
 125:./include/gpio.h ****     GPIO_CONFIG_OUTPUT_OD       = 0x200, /*!< GPIO output open drain mode */
 126:./include/gpio.h ****     GPIO_CONFIG_OUTPUT_PP       = 0x204, /*!< GPIO output push-pull mode */
 127:./include/gpio.h ****     GPIO_CONFIG_PULL_NONE       = 0x400, /*!< GPIO input none pull mode */
 128:./include/gpio.h ****     GPIO_CONFIG_PULL_UP         = 0x408, /*!< GPIO input pull-up mode */
 129:./include/gpio.h ****     GPIO_CONFIG_PULL_DOWN       = 0x410, /*!< GPIO input pull-down mode */
 130:./include/gpio.h ****     GPIO_CONFIG_SPEED_LOW       = 0x800, /*!< GPIO low speed mode */
 131:./include/gpio.h ****     GPIO_CONFIG_SPEED_MEDIUM    = 0x820, /*!< GPIO medium speed mode*/
 132:./include/gpio.h ****     GPIO_CONFIG_SPEED_HIGH      = 0x840, /*!< GPIO high speed mode */
 133:./include/gpio.h ****     GPIO_CONFIG_SPEED_VHIGH     = 0x860, /*!< GPIO very high speed mode */
 134:./include/gpio.h **** } gpio_config_t;
 135:./include/gpio.h **** 
 136:./include/gpio.h **** /**
 137:./include/gpio.h ****  * @ingroup public_gpio
 138:./include/gpio.h ****  * @brief GPIO general mode specific mask.
 139:./include/gpio.h ****  * 
 140:./include/gpio.h ****  * GPIO general configuration mode mask.
 141:./include/gpio.h ****  */
 142:./include/gpio.h **** typedef enum {
 143:./include/gpio.h ****     GPIO_MODE_INPUT     = 0x0, /*!< GPIO input mode */
 144:./include/gpio.h ****     GPIO_MODE_OUTPUT    = 0x1, /*!< GPIO output mode */
 145:./include/gpio.h ****     GPIO_MODE_ALTERNATE = 0x2, /*!< GPIO alternate mode */
 146:./include/gpio.h ****     GPIO_MODE_ANALOG    = 0x3, /*!< GPIO analog mode */
 147:./include/gpio.h **** } gpio_mode_t;
 148:./include/gpio.h **** 
 149:./include/gpio.h **** 
 150:./include/gpio.h **** /**
 151:./include/gpio.h ****  * @ingroup public_gpio
 152:./include/gpio.h ****  * @brief GPIO output mode specific mask.
 153:./include/gpio.h ****  * 
 154:./include/gpio.h ****  * GPIO output configuration mode mask.
 155:./include/gpio.h ****  */
 156:./include/gpio.h **** typedef enum {
 157:./include/gpio.h ****     GPIO_OUTPUT_PP  = 0x0, /*!< GPIO output push-pull mode */
 158:./include/gpio.h ****     GPIO_OUTPUT_OD  = 0x1  /*!< GPIO output open drain mode */
 159:./include/gpio.h **** } gpio_output_t;
 160:./include/gpio.h **** 
 161:./include/gpio.h **** /**
 162:./include/gpio.h ****  * @ingroup public_gpio
 163:./include/gpio.h ****  * @brief GPIO input pull mode specific mask.
 164:./include/gpio.h ****  * 
 165:./include/gpio.h ****  * GPIO input pull configuration mode mask.
 166:./include/gpio.h ****  */
 167:./include/gpio.h **** typedef enum {
 168:./include/gpio.h ****     GPIO_PULL_NONE  = 0x0, /*!< GPIO input none pull mode */
 169:./include/gpio.h ****     GPIO_PULL_UP    = 0x1, /*!< GPIO input pull-up mode */
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 7


 170:./include/gpio.h ****     GPIO_PULL_DOWN  = 0x2, /*!< GPIO input pull-down mode */
 171:./include/gpio.h **** } gpio_pull_t;
 172:./include/gpio.h **** 
 173:./include/gpio.h **** /**
 174:./include/gpio.h ****  * @ingroup public_gpio
 175:./include/gpio.h ****  * @brief GPIO speed mode specific mask.
 176:./include/gpio.h ****  * 
 177:./include/gpio.h ****  * GPIO speed configuration mode mask.
 178:./include/gpio.h ****  */
 179:./include/gpio.h **** typedef enum {
 180:./include/gpio.h ****     GPIO_SPEED_LOW      = 0x0, /*!< GPIO Low Speed Mode */
 181:./include/gpio.h ****     GPIO_SPEED_MEDIUM   = 0x1, /*!< GPIO Medium Speed Mode */
 182:./include/gpio.h ****     GPIO_SPEED_HIGH     = 0x2, /*!< GPIO High Speed Mode */
 183:./include/gpio.h ****     GPIO_SPEED_VHIGH    = 0x3, /*!< GPIO Very High Speed Mode */
 184:./include/gpio.h **** } gpio_speed_t;
 185:./include/gpio.h **** 
 186:./include/gpio.h **** /**
 187:./include/gpio.h ****  * @ingroup public_gpio
 188:./include/gpio.h ****  * @brief GPIO alternate function.
 189:./include/gpio.h ****  * 
 190:./include/gpio.h ****  * AFRL Register alternate function mask.
 191:./include/gpio.h ****  */
 192:./include/gpio.h **** typedef enum {
 193:./include/gpio.h ****     GPIO_ALT_AF0    = 0x00, /*!< GPIO Alternate Function 0 */
 194:./include/gpio.h ****     GPIO_ALT_AF1    = 0x01, /*!< GPIO Alternate Function 1 */
 195:./include/gpio.h ****     GPIO_ALT_AF2    = 0x02, /*!< GPIO Alternate Function 2 */
 196:./include/gpio.h ****     GPIO_ALT_AF3    = 0x03, /*!< GPIO Alternate Function 3 */
 197:./include/gpio.h ****     GPIO_ALT_AF4    = 0x04, /*!< GPIO Alternate Function 4 */
 198:./include/gpio.h ****     GPIO_ALT_AF5    = 0x05, /*!< GPIO Alternate Function 5 */
 199:./include/gpio.h ****     GPIO_ALT_AF6    = 0x06, /*!< GPIO Alternate Function 6 */
 200:./include/gpio.h ****     GPIO_ALT_AF7    = 0x07, /*!< GPIO Alternate Function 7 */
 201:./include/gpio.h ****     GPIO_ALT_AF8    = 0x08, /*!< GPIO Alternate Function 8 */
 202:./include/gpio.h ****     GPIO_ALT_AF9    = 0x09, /*!< GPIO Alternate Function 9 */
 203:./include/gpio.h ****     GPIO_ALT_AF10   = 0x0A, /*!< GPIO Alternate Function 10 */
 204:./include/gpio.h ****     GPIO_ALT_AF11   = 0x0B, /*!< GPIO Alternate Function 11 */
 205:./include/gpio.h ****     GPIO_ALT_AF12   = 0x0C, /*!< GPIO Alternate Function 12 */
 206:./include/gpio.h ****     GPIO_ALT_AF13   = 0x0D, /*!< GPIO Alternate Function 13 */
 207:./include/gpio.h ****     GPIO_ALT_AF14   = 0x0E, /*!< GPIO Alternate Function 14 */
 208:./include/gpio.h ****     GPIO_ALT_AF15   = 0x0F, /*!< GPIO Alternate Function 15 */
 209:./include/gpio.h **** } gpio_alt_t;
 210:./include/gpio.h **** 
 211:./include/gpio.h **** /*----------------------------------------------------------------------------*/
 212:./include/gpio.h **** /* Functions */
 213:./include/gpio.h **** /*----------------------------------------------------------------------------*/
 214:./include/gpio.h **** 
 215:./include/gpio.h **** 
 216:./include/gpio.h **** /** ### gpio:reset
 217:./include/gpio.h ****  * @ingroup public_gpio
 218:./include/gpio.h ****  * @brief Reset single or multiple GPIO peripheral/s.
 219:./include/gpio.h ****  * 
 220:./include/gpio.h ****  * Reset masked peripheral/s in RCC_AHB1RSTR, This will reset ALL registers
 221:./include/gpio.h ****  * associated with the target peripheral/s.
 222:./include/gpio.h ****  * 
 223:./include/gpio.h ****  * @param[in] mask GPIO mask to be reset.
 224:./include/gpio.h ****  * 
 225:./include/gpio.h ****  * @return None
 226:./include/gpio.h ****  * 
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 8


 227:./include/gpio.h ****  * @note It is a forded inline function.
 228:./include/gpio.h ****  * 
 229:./include/gpio.h ****  * @see gpio_rcc_t Mask type.
 230:./include/gpio.h ****  * @see rcc_ahb1_peripheral_clk_rst Internal rcc function.
 231:./include/gpio.h ****  * 
 232:./include/gpio.h ****  * E.g. @n
 233:./include/gpio.h ****  * * For single GPIO reset:
 234:./include/gpio.h ****  * @code
 235:./include/gpio.h ****  * ...
 236:./include/gpio.h ****  * // This reset a GPIOC peripheral.
 237:./include/gpio.h ****  * gpio_rst(GPIOC_RCC);
 238:./include/gpio.h ****  * ...
 239:./include/gpio.h ****  * @endcode
 240:./include/gpio.h ****  * * For Multiple GPIOs reset:
 241:./include/gpio.h ****  * @code
 242:./include/gpio.h ****  * ...
 243:./include/gpio.h ****  * // This reset a GPIOC & GPIOI peripherals.
 244:./include/gpio.h ****  * gpio_rst(GPIOC_RCC | GPIOI_RCC);
 245:./include/gpio.h ****  * ...
 246:./include/gpio.h ****  * @endcode
 247:./include/gpio.h ****  */
 248:./include/gpio.h **** __FORCE_INLINE void gpio_rst(gpio_rcc_t mask)
 249:./include/gpio.h **** {
 250:./include/gpio.h ****     rcc_rst_ahb1((rcc_ahb1_t) mask);
 251:./include/gpio.h **** }
 252:./include/gpio.h **** 
 253:./include/gpio.h **** /** ### gpio:clock:enable:
 254:./include/gpio.h ****  * @ingroup public_gpio
 255:./include/gpio.h ****  * @brief Enable single or multiple GPIO peripheral/s clock.
 256:./include/gpio.h ****  * 
 257:./include/gpio.h ****  * Enable clock in RCC_AHB1 to masked GPIO/s.
 258:./include/gpio.h ****  * 
 259:./include/gpio.h ****  * @param[in] mask GPIO mask to be enabled.
 260:./include/gpio.h ****  * 
 261:./include/gpio.h ****  * @return None
 262:./include/gpio.h ****  * 
 263:./include/gpio.h ****  * @note It is a forded inline function.
 264:./include/gpio.h ****  * 
 265:./include/gpio.h ****  * @see gpio_rcc_t Mask type.
 266:./include/gpio.h ****  * @see rcc_ahb1_peripheral_clk_en Internal rcc function.
 267:./include/gpio.h ****  * 
 268:./include/gpio.h ****  * E.g. @n
 269:./include/gpio.h ****  * * For single GPIO clock enable:
 270:./include/gpio.h ****  * @code
 271:./include/gpio.h ****  * ...
 272:./include/gpio.h ****  * // This enable a GPIOC clock.
 273:./include/gpio.h ****  * gpio_clk_en(GPIOC_RCC);
 274:./include/gpio.h ****  * ...
 275:./include/gpio.h ****  * @endcode
 276:./include/gpio.h ****  * * For Multiple GPIOs clock enable:
 277:./include/gpio.h ****  * @code
 278:./include/gpio.h ****  * ...
 279:./include/gpio.h ****  * // This enable a GPIOC & GPIOI clock.
 280:./include/gpio.h ****  * gpio_clk_en(GPIOC_RCC | GPIOI_RCC);
 281:./include/gpio.h ****  * ...
 282:./include/gpio.h ****  * @endcode
 283:./include/gpio.h ****  */
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 9


 284:./include/gpio.h **** __FORCE_INLINE void gpio_clk_en(gpio_rcc_t mask)
  78              		.loc 3 284 21 view .LVU9
  79              	.LBE32:
 285:./include/gpio.h **** {
 286:./include/gpio.h ****     rcc_clk_en_ahb1((rcc_ahb1_t) mask);
  80              		.loc 3 286 5 view .LVU10
  81              	.LBB43:
  82              	.LBB33:
  83              	.LBI33:
  84              		.file 4 "./include/rcc.h"
   1:./include/rcc.h **** /**
   2:./include/rcc.h ****  * @file rcc.h
   3:./include/rcc.h ****  * @author David A. Aguirre M. (daguirre.m@outlook.com)
   4:./include/rcc.h ****  * @brief RCC - Custom HAL for DSP Board SDK.
   5:./include/rcc.h ****  * @version d0.2
   6:./include/rcc.h ****  * @date 2022-05-02
   7:./include/rcc.h ****  *
   8:./include/rcc.h ****  * @copyright MIT License, Copyright (c) 2022 David A. Aguirre M. @n @n
   9:./include/rcc.h ****  *
  10:./include/rcc.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
  11:./include/rcc.h ****  * of this software and associated documentation files (the "Software"), to deal
  12:./include/rcc.h ****  * in the Software without restriction, including without limitation the rights
  13:./include/rcc.h ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  14:./include/rcc.h ****  * copies of the Software, and to permit persons to whom the Software is
  15:./include/rcc.h ****  * furnished to do so, subject to the following conditions: @n @n
  16:./include/rcc.h ****  *
  17:./include/rcc.h ****  * The above copyright notice and this permission notice shall be included in all
  18:./include/rcc.h ****  * copies or substantial portions of the Software. @n @n
  19:./include/rcc.h ****  *
  20:./include/rcc.h ****  * THE SOFTWARE IS PROVIDED  "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  21:./include/rcc.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  22:./include/rcc.h ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  23:./include/rcc.h ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  24:./include/rcc.h ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  25:./include/rcc.h ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  26:./include/rcc.h ****  * SOFTWARE.
  27:./include/rcc.h ****  *
  28:./include/rcc.h ****  */
  29:./include/rcc.h **** 
  30:./include/rcc.h **** /**
  31:./include/rcc.h ****  * @todo Backupdomain control implementation
  32:./include/rcc.h ****  * @todo Clock ctrl & status implementation
  33:./include/rcc.h ****  * @todo Spread Spectrum Clock Generator implementation
  34:./include/rcc.h ****  * @todo I²S implementation
  35:./include/rcc.h ****  * @todo PLL Q Individual Compute & Set
  36:./include/rcc.h ****  * @todo APB[1,2] Individual Preescaleers Set
  37:./include/rcc.h ****  * @todo MCU Clock Output Implementation
  38:./include/rcc.h ****  * @todo RTC Preescalers implementation
  39:./include/rcc.h ****  * @todo RCC Interrupts
  40:./include/rcc.h ****  * 
  41:./include/rcc.h ****  */
  42:./include/rcc.h **** 
  43:./include/rcc.h **** #ifndef _RCC_H_
  44:./include/rcc.h **** #define _RCC_H_
  45:./include/rcc.h **** 
  46:./include/rcc.h **** #ifdef __cplusplus
  47:./include/rcc.h **** extern "C" {
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 10


  48:./include/rcc.h **** #endif
  49:./include/rcc.h **** 
  50:./include/rcc.h **** /**
  51:./include/rcc.h ****  * @addtogroup rcc RCC
  52:./include/rcc.h ****  */
  53:./include/rcc.h **** 
  54:./include/rcc.h **** /**
  55:./include/rcc.h ****  * @defgroup public_rcc Public
  56:./include/rcc.h ****  * @ingroup rcc
  57:./include/rcc.h ****  */
  58:./include/rcc.h **** 
  59:./include/rcc.h **** #include "system.h"
  60:./include/rcc.h **** 
  61:./include/rcc.h **** /*----------------------------------------------------------------------------*/
  62:./include/rcc.h **** /* Enums*/
  63:./include/rcc.h **** /*----------------------------------------------------------------------------*/
  64:./include/rcc.h **** 
  65:./include/rcc.h **** /**
  66:./include/rcc.h ****  * @ingroup public_rcc
  67:./include/rcc.h ****  * @brief System core clocks.
  68:./include/rcc.h ****  *
  69:./include/rcc.h ****  * Source clocks than can be configured as Systen core clock.
  70:./include/rcc.h ****  */
  71:./include/rcc.h **** typedef enum
  72:./include/rcc.h **** {
  73:./include/rcc.h ****     RCC_SYSCLK_HSI  = RCC_CR_HSION, /*!< System core clock from hsi source*/
  74:./include/rcc.h ****     RCC_SYSCLK_HSE  = RCC_CR_HSEON, /*!< System core clock from hse source*/
  75:./include/rcc.h ****     RCC_SYSCLK_PLL  = RCC_CR_PLLON, /*!< System core clock from pll source*/
  76:./include/rcc.h ****     RCC_SYSCLK_END /*!< End of rcc_sysclk enum */
  77:./include/rcc.h **** } rcc_sysclk_t;
  78:./include/rcc.h **** 
  79:./include/rcc.h **** /**
  80:./include/rcc.h ****  * @ingroup public_rcc
  81:./include/rcc.h ****  * @brief PLL surce clocks.
  82:./include/rcc.h ****  *
  83:./include/rcc.h ****  * Source clocks than can be configured as PLL Input clock source.
  84:./include/rcc.h ****  */
  85:./include/rcc.h **** typedef enum
  86:./include/rcc.h **** {
  87:./include/rcc.h ****     RCC_PLLCLK_HSI  = RCC_PLLCFGR_PLLSRC_HSI, /*!< PLL input clock from hsi source*/
  88:./include/rcc.h ****     RCC_PLLCLK_HSE  = RCC_PLLCFGR_PLLSRC_HSE, /*!< PLL input clock from hse source*/
  89:./include/rcc.h ****     RCC_PLLCLK_NONE = 0xFFFFFFFE, /*!< PLL disable input */
  90:./include/rcc.h ****     RCC_PLLCLK_END /*!< End of rcc_pllclk enum */
  91:./include/rcc.h **** } rcc_pllclk_t;
  92:./include/rcc.h **** 
  93:./include/rcc.h **** /**
  94:./include/rcc.h ****  * @ingroup public_rcc
  95:./include/rcc.h ****  * @brief AHB1 peripherals masks.
  96:./include/rcc.h ****  *
  97:./include/rcc.h ****  * Peripherals mask at AHB1 BUS.
  98:./include/rcc.h ****  */
  99:./include/rcc.h **** typedef enum
 100:./include/rcc.h **** {
 101:./include/rcc.h ****     RCC_AHB1_GPIOA      = RCC_AHB1ENR_GPIOAEN,      /*!< GPIOA Enable mask */
 102:./include/rcc.h ****     RCC_AHB1_GPIOB      = RCC_AHB1ENR_GPIOBEN,      /*!< GPIOB Enable mask */
 103:./include/rcc.h ****     RCC_AHB1_GPIOC      = RCC_AHB1ENR_GPIOCEN,      /*!< GPIOC Enable mask */
 104:./include/rcc.h ****     RCC_AHB1_GPIOD      = RCC_AHB1ENR_GPIODEN,      /*!< GPIOD Enable mask */
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 11


 105:./include/rcc.h ****     RCC_AHB1_GPIOE      = RCC_AHB1ENR_GPIOEEN,      /*!< GPIOE Enable mask */
 106:./include/rcc.h ****     RCC_AHB1_GPIOF      = RCC_AHB1ENR_GPIOFEN,      /*!< GPIOF Enable mask */
 107:./include/rcc.h ****     RCC_AHB1_GPIOG      = RCC_AHB1ENR_GPIOGEN,      /*!< GPIOG Enable mask */
 108:./include/rcc.h ****     RCC_AHB1_GPIOH      = RCC_AHB1ENR_GPIOHEN,      /*!< GPIOH Enable mask */
 109:./include/rcc.h ****     RCC_AHB1_GPIOI      = RCC_AHB1ENR_GPIOIEN,      /*!< GPIOI Enable mask */
 110:./include/rcc.h ****     RCC_AHB1_CRC        = RCC_AHB1ENR_CRCEN,        /*!< CRC Enable mask */
 111:./include/rcc.h ****     RCC_AHB1_BKPSRAM    = RCC_AHB1ENR_BKPSRAMEN,    /*!< BKPSRAM Enable mask */
 112:./include/rcc.h ****     RCC_AHB1_CCMDATA    = RCC_AHB1ENR_CCMDATARAMEN, /*!< CCMDATA Enable mask */
 113:./include/rcc.h ****     RCC_AHB1_DMA1       = RCC_AHB1ENR_DMA1EN,       /*!< DMA1 Enable mask */
 114:./include/rcc.h ****     RCC_AHB1_DMA2       = RCC_AHB1ENR_DMA2EN,       /*!< DMA2 Enable mask */
 115:./include/rcc.h ****     RCC_AHB1_ETHMAC     = RCC_AHB1ENR_ETHMACEN,     /*!< ETHMAC Enable mask */
 116:./include/rcc.h ****     RCC_AHB1_ETHMACTX   = RCC_AHB1ENR_ETHMACTXEN,   /*!< ETHMACTX Enable mask */
 117:./include/rcc.h ****     RCC_AHB1_ETHMACRX   = RCC_AHB1ENR_ETHMACRXEN,   /*!< ETHMACRX Enable mask */
 118:./include/rcc.h ****     RCC_AHB1_ETHMACPTP  = RCC_AHB1ENR_ETHMACPTPEN,  /*!< ETHMACPTP Enable mask */
 119:./include/rcc.h ****     RCC_AHB1_OTGHS      = RCC_AHB1ENR_OTGHSEN,      /*!< OTGHS Enable mask */
 120:./include/rcc.h ****     RCC_AHB1_OTGHSULPI  = RCC_AHB1ENR_OTGHSULPIEN,  /*!< OTGHS ULPI Enable mask */
 121:./include/rcc.h ****     RCC_AHB1_END /*!< End of rcc_ahb1 enum */
 122:./include/rcc.h **** } rcc_ahb1_t;
 123:./include/rcc.h **** 
 124:./include/rcc.h **** /**
 125:./include/rcc.h ****  * @ingroup public_rcc
 126:./include/rcc.h ****  * @brief AHB2 peripherals masks.
 127:./include/rcc.h ****  *
 128:./include/rcc.h ****  * Peripherals mask at AHB2 BUS.
 129:./include/rcc.h ****  */
 130:./include/rcc.h **** typedef enum
 131:./include/rcc.h **** {
 132:./include/rcc.h ****     RCC_AHB2_DCMI   = RCC_AHB2ENR_DCMIEN,   /*!< DCMI Enable mask */
 133:./include/rcc.h **** #if defined(RCC_AHB2ENR_CRYPEN)
 134:./include/rcc.h ****     RCC_AHB2_CRYP   = RCC_AHB2ENR_CRYPEN,   /*!< CRYP Enable mask */
 135:./include/rcc.h **** #endif /* defined(RCC_AHB2ENR_CRYPEN) */
 136:./include/rcc.h **** #if defined(RCC_AHB2ENR_HASHEN)
 137:./include/rcc.h ****     RCC_AHB2_HASH   = RCC_AHB2ENR_HASHEN,   /*!< HASH Enable mask */ 
 138:./include/rcc.h **** #endif /* defined(RCC_AHB2ENR_HASHEN) */
 139:./include/rcc.h ****     RCC_AHB2_RNG    = RCC_AHB2ENR_RNGEN,    /*!< RNG Enable mask */
 140:./include/rcc.h ****     RCC_AHB2_OTGFS  = RCC_AHB2ENR_OTGFSEN,  /*!< OTGFS Enable mask */
 141:./include/rcc.h ****     RCC_AHB2_END /*!< End of rcc_ahb2 enum */
 142:./include/rcc.h **** } rcc_ahb2_t;
 143:./include/rcc.h **** 
 144:./include/rcc.h **** /**
 145:./include/rcc.h ****  * @ingroup public_rcc
 146:./include/rcc.h ****  * @brief AHB3 peripherals masks.
 147:./include/rcc.h ****  *
 148:./include/rcc.h ****  * Peripherals mask at AHB3 BUS.
 149:./include/rcc.h ****  */
 150:./include/rcc.h **** typedef enum
 151:./include/rcc.h **** {
 152:./include/rcc.h ****     RCC_AHB3_FSMC   = RCC_AHB3ENR_FSMCEN,   /*!< FSMC Enable mask */
 153:./include/rcc.h ****     RCC_AHB3_END /*!< End of rcc_ahb3 enum */
 154:./include/rcc.h **** } rcc_ahb3_t;
 155:./include/rcc.h **** 
 156:./include/rcc.h **** /**
 157:./include/rcc.h ****  * @ingroup public_rcc
 158:./include/rcc.h ****  * @brief APB1 peripherals masks.
 159:./include/rcc.h ****  *
 160:./include/rcc.h ****  * Peripherals mask at APB1 BUS.
 161:./include/rcc.h ****  */
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 12


 162:./include/rcc.h **** typedef enum
 163:./include/rcc.h **** {
 164:./include/rcc.h ****     RCC_APB1_TIM2   = RCC_APB1ENR_TIM2EN,   /*!< TIM2 Enable mask */
 165:./include/rcc.h ****     RCC_APB1_TIM3   = RCC_APB1ENR_TIM3EN,   /*!< TIM3 Enable mask */
 166:./include/rcc.h ****     RCC_APB1_TIM4   = RCC_APB1ENR_TIM4EN,   /*!< TIM4 Enable mask */
 167:./include/rcc.h ****     RCC_APB1_TIM5   = RCC_APB1ENR_TIM5EN,   /*!< TIM5 Enable mask */
 168:./include/rcc.h ****     RCC_APB1_TIM6   = RCC_APB1ENR_TIM6EN,   /*!< TIM6 Enable mask */
 169:./include/rcc.h ****     RCC_APB1_TIM7   = RCC_APB1ENR_TIM7EN,   /*!< TIM7 Enable mask */
 170:./include/rcc.h ****     RCC_APB1_TIM12  = RCC_APB1ENR_TIM12EN,  /*!< TIM12 Enable mask */
 171:./include/rcc.h ****     RCC_APB1_TIM13  = RCC_APB1ENR_TIM13EN,  /*!< TIM13 Enable mask */
 172:./include/rcc.h ****     RCC_APB1_TIM14  = RCC_APB1ENR_TIM14EN,  /*!< TIM14 Enable mask */
 173:./include/rcc.h ****     RCC_APB1_WWDG   = RCC_APB1ENR_WWDGEN,   /*!< WWDG Enable mask */
 174:./include/rcc.h ****     RCC_APB1_SPI2   = RCC_APB1ENR_SPI2EN,   /*!< SPI2 Enable mask */
 175:./include/rcc.h ****     RCC_APB1_SPI3   = RCC_APB1ENR_SPI3EN,   /*!< SPI3 Enable mask */
 176:./include/rcc.h ****     RCC_APB1_USART2 = RCC_APB1ENR_USART2EN, /*!< USART2 Enable mask */
 177:./include/rcc.h ****     RCC_APB1_USART3 = RCC_APB1ENR_USART3EN, /*!< USART3 Enable mask */
 178:./include/rcc.h ****     RCC_APB1_UART4  = RCC_APB1ENR_UART4EN,  /*!< UART4 Enable mask */
 179:./include/rcc.h ****     RCC_APB1_UART5  = RCC_APB1ENR_UART5EN,  /*!< UART5 Enable mask */
 180:./include/rcc.h ****     RCC_APB1_I2C1   = RCC_APB1ENR_I2C1EN,   /*!< I2C1 Enable mask */
 181:./include/rcc.h ****     RCC_APB1_I2C2   = RCC_APB1ENR_I2C2EN,   /*!< I2C2 Enable mask */
 182:./include/rcc.h ****     RCC_APB1_I2C3   = RCC_APB1ENR_I2C3EN,   /*!< I2C3 Enable mask */
 183:./include/rcc.h ****     RCC_APB1_CAN1   = RCC_APB1ENR_CAN1EN,   /*!< CAN1 Enable mask */
 184:./include/rcc.h ****     RCC_APB1_CAN2   = RCC_APB1ENR_CAN2EN,   /*!< CAN2 Enable mask */
 185:./include/rcc.h ****     RCC_APB1_PWR    = RCC_APB1ENR_PWREN,    /*!< PWR Enable mask */
 186:./include/rcc.h ****     RCC_APB1_DAC    = RCC_APB1ENR_DACEN,    /*!< DAC Enable mask */
 187:./include/rcc.h ****     RCC_APB1_END /*!< End of rcc_apb1 enum */
 188:./include/rcc.h **** } rcc_apb1_t;
 189:./include/rcc.h **** 
 190:./include/rcc.h **** /**
 191:./include/rcc.h ****  * @ingroup public_rcc
 192:./include/rcc.h ****  * @brief APB2 peripherals masks.
 193:./include/rcc.h ****  *
 194:./include/rcc.h ****  * Peripherals mask at APB2 BUS.
 195:./include/rcc.h ****  */
 196:./include/rcc.h **** typedef enum
 197:./include/rcc.h **** {
 198:./include/rcc.h ****     RCC_APB2_TIM1   = RCC_APB2ENR_TIM1EN,   /*!< TIM1 Enable mask */
 199:./include/rcc.h ****     RCC_APB2_TIM8   = RCC_APB2ENR_TIM8EN,   /*!< TIM8 Enable mask */
 200:./include/rcc.h ****     RCC_APB2_USART1 = RCC_APB2ENR_USART1EN, /*!< USART1 Enable mask */
 201:./include/rcc.h ****     RCC_APB2_USART6 = RCC_APB2ENR_USART6EN, /*!< USART6 Enable mask */
 202:./include/rcc.h ****     RCC_APB2_ADC1   = RCC_APB2ENR_ADC1EN,   /*!< ADC1 Enable mask */
 203:./include/rcc.h ****     RCC_APB2_ADC2   = RCC_APB2ENR_ADC2EN,   /*!< ADC2 Enable mask */
 204:./include/rcc.h ****     RCC_APB2_ADC3   = RCC_APB2ENR_ADC3EN,   /*!< ADC3 Enable mask */
 205:./include/rcc.h ****     RCC_APB2_SDIO   = RCC_APB2ENR_SDIOEN,   /*!< SDIO Enable mask */
 206:./include/rcc.h ****     RCC_APB2_SPI1   = RCC_APB2ENR_SPI1EN,   /*!< SPI1 Enable mask */
 207:./include/rcc.h ****     RCC_APB2_SYSCFG = RCC_APB2ENR_SYSCFGEN, /*!< SYSCFG Enable mask */
 208:./include/rcc.h ****     RCC_APB2_TIM9   = RCC_APB2ENR_TIM9EN,   /*!< TIM9 Enable mask */
 209:./include/rcc.h ****     RCC_APB2_TIM10  = RCC_APB2ENR_TIM10EN,  /*!< TIM10 Enable mask */
 210:./include/rcc.h ****     RCC_APB2_TIM11  = RCC_APB2ENR_TIM11EN,  /*!< TIM11 Enable mask */
 211:./include/rcc.h ****     RCC_APB2_END /*!< End of rcc_apb2 enum */
 212:./include/rcc.h **** } rcc_apb2_t;
 213:./include/rcc.h **** 
 214:./include/rcc.h **** /*----------------------------------------------------------------------------*/
 215:./include/rcc.h **** /* Functions */
 216:./include/rcc.h **** /*----------------------------------------------------------------------------*/
 217:./include/rcc.h **** 
 218:./include/rcc.h **** /** ### rcc:system_core_clock:select
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 13


 219:./include/rcc.h ****  * @ingroup public_rcc
 220:./include/rcc.h ****  * @brief Select and inicializate the system core clock.
 221:./include/rcc.h ****  *
 222:./include/rcc.h ****  * Switch the system core clock source to a target 'source'.
 223:./include/rcc.h ****  *
 224:./include/rcc.h ****  * @param[in] source System target source clock.
 225:./include/rcc.h ****  *
 226:./include/rcc.h ****  * @return None.
 227:./include/rcc.h ****  * 
 228:./include/rcc.h ****  * @note 1. If a PLL is the target clock you must define the PLL source clock with
 229:./include/rcc.h ****  *       an OR operator.
 230:./include/rcc.h ****  * 
 231:./include/rcc.h ****  * @note 2. If a PLL is the target clock you must fisrt compute the PLL parameters
 232:./include/rcc.h ****  *       and set it before switch the system core clock.
 233:./include/rcc.h ****  * 
 234:./include/rcc.h ****  * @note 3. Others clocks will be deactivated after call this function.
 235:./include/rcc.h ****  *
 236:./include/rcc.h ****  * E.g.
 237:./include/rcc.h ****  * * For HSE or HSI:
 238:./include/rcc.h ****  * @code
 239:./include/rcc.h ****  * ...
 240:./include/rcc.h ****  * // This enable and switch the system core clock to HSE target
 241:./include/rcc.h ****  * rcc_sysclk_select(RCC_SYSCLK_HSE);
 242:./include/rcc.h ****  * ...
 243:./include/rcc.h ****  * @endcode
 244:./include/rcc.h ****  * * For PLL:
 245:./include/rcc.h ****  * @code
 246:./include/rcc.h ****  * ...
 247:./include/rcc.h ****  * // This enable and switch the system core clock to PLL target with
 248:./include/rcc.h ****  * // HSE as input PLL clock
 249:./include/rcc.h ****  * rcc_sysclk_select(RCC_SYSCLK_PLL | RCC_SYSCLK_HSE);
 250:./include/rcc.h ****  * ...
 251:./include/rcc.h ****  * @endcode
 252:./include/rcc.h ****  */
 253:./include/rcc.h **** void rcc_sysclk_select(rcc_sysclk_t source);
 254:./include/rcc.h **** 
 255:./include/rcc.h **** /** ### rcc:pll:parameter:compute
 256:./include/rcc.h ****  * @ingroup public_rcc
 257:./include/rcc.h ****  * @brief Compute PLL configuration parameters.
 258:./include/rcc.h ****  *
 259:./include/rcc.h ****  * Compute M,N,P and Q PLL parameters from the desired clock for the PLL and save
 260:./include/rcc.h ****  * them on static internal variable [pll_parameters].
 261:./include/rcc.h ****  *
 262:./include/rcc.h ****  * @param[in] pll_clk_out Desired PLL clock [MHz].
 263:./include/rcc.h ****  * @param[in] pll_clk_in PLL source input clock.
 264:./include/rcc.h ****  *
 265:./include/rcc.h ****  * @return None.
 266:./include/rcc.h ****  *
 267:./include/rcc.h ****  * @note Always Q parameter will compute to get a 48 MHz PLL48CK clock, if you
 268:./include/rcc.h ****  *       need less you must call rcc_pll_param_q_set function.
 269:./include/rcc.h ****  *
 270:./include/rcc.h ****  * E.g.
 271:./include/rcc.h ****  * @code
 272:./include/rcc.h ****  * ...
 273:./include/rcc.h ****  * // It will calculate the parameters to get 168 MHz at PLL output with HSE
 274:./include/rcc.h ****  * // as input clock source to PLL
 275:./include/rcc.h ****  * rcc_pll_param_cpte(168, PLL_SRC_HSE);
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 14


 276:./include/rcc.h ****  * ...
 277:./include/rcc.h ****  * @endcode
 278:./include/rcc.h ****  */
 279:./include/rcc.h **** void rcc_pll_param_cpte(uint8_t pll_clk_out, rcc_pllclk_t pll_clk_in);
 280:./include/rcc.h **** 
 281:./include/rcc.h **** /** ### rcc:pll:parameter:set
 282:./include/rcc.h ****  * @ingroup public_rcc
 283:./include/rcc.h ****  * @brief Set PLL parameters stored on static internal variable [pll_parameters].
 284:./include/rcc.h ****  * 
 285:./include/rcc.h ****  * Set P, M, N, Q, PREAHB1 & PREAHB2 parameters on RCC_PLLCFGR Register.
 286:./include/rcc.h ****  * 
 287:./include/rcc.h ****  * @return None.
 288:./include/rcc.h ****  * E.g.
 289:./include/rcc.h ****  * @code
 290:./include/rcc.h ****  * ...
 291:./include/rcc.h ****  * // It will set the parameters stored on internal pll_paramenters variable
 292:./include/rcc.h ****  * // to PLL
 293:./include/rcc.h ****  * rcc_pll_param_set();
 294:./include/rcc.h ****  * ...
 295:./include/rcc.h ****  * @endcode
 296:./include/rcc.h ****  */
 297:./include/rcc.h **** void rcc_pll_param_set(void);
 298:./include/rcc.h **** 
 299:./include/rcc.h **** /** ### rcc:pll:parameter:clear
 300:./include/rcc.h ****  * @ingroup public_rcc
 301:./include/rcc.h ****  * @brief Clear the PLL parameters.
 302:./include/rcc.h ****  * 
 303:./include/rcc.h ****  * Clear P, M, N, Q, PREAHB1 & PREAHB2 parameters on RCC_PLLCFGR Register.
 304:./include/rcc.h ****  *
 305:./include/rcc.h ****  * @return None.
 306:./include/rcc.h ****  * 
 307:./include/rcc.h ****  * E.g.
 308:./include/rcc.h ****  * @code
 309:./include/rcc.h ****  * ...
 310:./include/rcc.h ****  * // It will clear the parameters on PLL
 311:./include/rcc.h ****  * rcc_pll_param_clr();
 312:./include/rcc.h ****  * ...
 313:./include/rcc.h ****  * @endcode
 314:./include/rcc.h ****  */
 315:./include/rcc.h **** void rcc_pll_param_clr(void);
 316:./include/rcc.h **** 
 317:./include/rcc.h **** /** ### rcc:pll:parameter:compute_and_set
 318:./include/rcc.h ****  * @ingroup public_rcc
 319:./include/rcc.h ****  * @brief Compute & set the PLL Parameters.
 320:./include/rcc.h ****  * 
 321:./include/rcc.h ****  * Call rcc_pll_param_cpte, rcc_pll_param_clr & rcc_pll_param_set functions.
 322:./include/rcc.h ****  * 
 323:./include/rcc.h ****  * @param[in] pll_clk_out Desired PLL clock [MHz].
 324:./include/rcc.h ****  * @param[in] pll_clk_in PLL source input clock.
 325:./include/rcc.h ****  * 
 326:./include/rcc.h ****  * @return None.
 327:./include/rcc.h ****  * 
 328:./include/rcc.h ****  * E.g.
 329:./include/rcc.h ****  * @code
 330:./include/rcc.h ****  * ...
 331:./include/rcc.h ****  * // It will calculate the parameters to get 168 MHz at PLL output with HSE
 332:./include/rcc.h ****  * // as input clock source to PLL and then sets to PLL registers
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 15


 333:./include/rcc.h ****  * rcc_pll_param_cpte_set(168, PLL_SRC_HSE);
 334:./include/rcc.h ****  * ...
 335:./include/rcc.h ****  * @endcode
 336:./include/rcc.h ****  */
 337:./include/rcc.h **** __FORCE_INLINE void rcc_pll_param_cpte_set(uint8_t pll_clk_out, 
 338:./include/rcc.h ****     rcc_pllclk_t pll_clk_in
 339:./include/rcc.h **** )
 340:./include/rcc.h **** {
 341:./include/rcc.h ****     rcc_pll_param_cpte(pll_clk_out, pll_clk_in);
 342:./include/rcc.h ****     rcc_pll_param_clr();
 343:./include/rcc.h ****     rcc_pll_param_set();
 344:./include/rcc.h **** }
 345:./include/rcc.h **** 
 346:./include/rcc.h **** /** ### rcc:clock:enable:AHB1
 347:./include/rcc.h ****  * @ingroup public_rcc
 348:./include/rcc.h ****  * @brief Enable clock to AHB1 peripherial/s.
 349:./include/rcc.h ****  * 
 350:./include/rcc.h ****  * Allow enable following clock to peripherials on RCC_APB1ENR register:
 351:./include/rcc.h ****  *  * GPIO[A,B,C...I].
 352:./include/rcc.h ****  *  * CRC.
 353:./include/rcc.h ****  *  * Backup SRAM interface.
 354:./include/rcc.h ****  *  * CCM Data RAM interface.
 355:./include/rcc.h ****  *  * DMA[1:2].
 356:./include/rcc.h ****  *  * Ethernet [MAC, TX, RX, PTP].
 357:./include/rcc.h ****  *  * USB [HS, HS_ULPI].
 358:./include/rcc.h ****  *
 359:./include/rcc.h ****  * @param[in] mask AHB1 Peripheral/s mask to be enabled.
 360:./include/rcc.h ****  * 
 361:./include/rcc.h ****  * @return None.
 362:./include/rcc.h ****  * 
 363:./include/rcc.h ****  * @note 1. You can enable multiple peripherals at time passing each of them 
 364:./include/rcc.h ****  *          with an OR operator.
 365:./include/rcc.h ****  * @note 2. It is a forced inline function.
 366:./include/rcc.h ****  * 
 367:./include/rcc.h ****  * E.g. @n
 368:./include/rcc.h ****  * For one peripheral enable:
 369:./include/rcc.h ****  * @code
 370:./include/rcc.h ****  * ...
 371:./include/rcc.h ****  * // This enable clock to GPIOA peripheral
 372:./include/rcc.h ****  * rcc_clk_en_ahb1(RCC_AHB1_GPIOA);
 373:./include/rcc.h ****  * ...
 374:./include/rcc.h ****  * @endcode
 375:./include/rcc.h ****  * For multiple peripherals enable:
 376:./include/rcc.h ****  * @code
 377:./include/rcc.h ****  * ...
 378:./include/rcc.h ****  * // This enable clock to GPIOA & GPIOB peripheral
 379:./include/rcc.h ****  * rcc_clk_en_ahb1(RCC_AHB1_GPIOA | RCC_AHB1_GPIOB);
 380:./include/rcc.h ****  * ...
 381:./include/rcc.h ****  * @endcode
 382:./include/rcc.h ****  */
 383:./include/rcc.h **** __FORCE_INLINE void rcc_clk_en_ahb1(rcc_ahb1_t mask)
  85              		.loc 4 383 21 view .LVU11
  86              	.LBB34:
 384:./include/rcc.h **** {
 385:./include/rcc.h ****     RCC->AHB1ENR |= mask;
  87              		.loc 4 385 5 view .LVU12
  88              	.LBE34:
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 16


  89              	.LBE33:
  90              	.LBE43:
  36:src/main.c    ****     gpio_clk_en(GPIOA_RCC);
  91              		.loc 2 36 1 is_stmt 0 view .LVU13
  92 0000 80B5     		push	{r7, lr}
  93              		.cfi_def_cfa_offset 8
  94              		.cfi_offset 7, -8
  95              		.cfi_offset 14, -4
  96              	.LBB44:
  97              	.LBB39:
  98              	.LBB35:
  99              		.loc 4 385 18 view .LVU14
 100 0002 244F     		ldr	r7, .L11
 101              	.LBE35:
 102              	.LBE39:
 103              	.LBE44:
  38:src/main.c    ****     gpio_config_mode(GPIOA, GPIO_MODE_ANALOG, GPIO_IO0);
 104              		.loc 2 38 5 view .LVU15
 105 0004 2448     		ldr	r0, .L11+4
 106              	.LBB45:
 107              	.LBB40:
 108              	.LBB36:
 109              		.loc 4 385 18 view .LVU16
 110 0006 3B6B     		ldr	r3, [r7, #48]
 111              	.LBE36:
 112              	.LBE40:
 113              	.LBE45:
  39:src/main.c    **** 
  40:src/main.c    ****     /* ADC clock 1, 2, 3 should be enabled ---------------------------------|*/
  41:src/main.c    ****     adc_clk_en(ADC1_RCC | ADC2_RCC | ADC3_RCC);                         /*<-|*/ /*[]*/
  42:src/main.c    ****     
  43:src/main.c    ****     /* ADC clock 2 & 3 should be disabled ----------------------------------|*/
  44:src/main.c    ****     adc_clk_dis(ADC2_RCC | ADC3_RCC);                                   /*<-|*/ /*[]*/
  45:src/main.c    ****     adc_sequencer_rgl.sequece[0] = 0;
  46:src/main.c    ****     adc_sequencer_rgl.sequece[1] = 17;
  47:src/main.c    ****     adc_sequencer_rgl.sequece[2] = 16;
  48:src/main.c    ****     adc_sequencer_rgl.lenght = 3;
 114              		.loc 2 48 30 view .LVU17
 115 0008 244D     		ldr	r5, .L11+8
  49:src/main.c    ****     adc_config_seq_rgl(ADC1);
 116              		.loc 2 49 5 view .LVU18
 117 000a 254C     		ldr	r4, .L11+12
  38:src/main.c    ****     gpio_config_mode(GPIOA, GPIO_MODE_ANALOG, GPIO_IO0);
 118              		.loc 2 38 5 view .LVU19
 119 000c 0122     		movs	r2, #1
 120              	.LBB46:
 121              	.LBB41:
 122              	.LBB37:
 123              		.loc 4 385 18 view .LVU20
 124 000e 1343     		orrs	r3, r3, r2
 125              	.LBE37:
 126              	.LBE41:
 127              	.LBE46:
  38:src/main.c    ****     gpio_config_mode(GPIOA, GPIO_MODE_ANALOG, GPIO_IO0);
 128              		.loc 2 38 5 view .LVU21
 129 0010 0321     		movs	r1, #3
 130              	.LBB47:
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 17


 131              	.LBB42:
 132              	.LBB38:
 133              		.loc 4 385 18 view .LVU22
 134 0012 3B63     		str	r3, [r7, #48]
 135              	.LVL3:
 136              		.loc 4 385 18 view .LVU23
 137              	.LBE38:
 138              	.LBE42:
 139              	.LBE47:
  38:src/main.c    ****     gpio_config_mode(GPIOA, GPIO_MODE_ANALOG, GPIO_IO0);
 140              		.loc 2 38 5 is_stmt 1 view .LVU24
 141 0014 FFF7FEFF 		bl	gpio_config_mode
 142              	.LVL4:
  41:src/main.c    ****     
 143              		.loc 2 41 5 view .LVU25
 144              	.LBB48:
 145              	.LBI48:
 146              		.file 5 "./include/adc.h"
   1:./include/adc.h **** /**
   2:./include/adc.h ****  * @file adc.h
   3:./include/adc.h ****  * @author David A. Aguirre M. (daguirre.m@outlook.com)
   4:./include/adc.h ****  * @brief ADC - Custom HAL for DSP Board SDK.
   5:./include/adc.h ****  * @version d0.1
   6:./include/adc.h ****  * @date 2022-05-02
   7:./include/adc.h ****  * 
   8:./include/adc.h ****  * @copyright MIT License, Copyright (c) 2022 David A. Aguirre M. @n @n
   9:./include/adc.h ****  *
  10:./include/adc.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
  11:./include/adc.h ****  * of this software and associated documentation files (the "Software"), to deal
  12:./include/adc.h ****  * in the Software without restriction, including without limitation the rights
  13:./include/adc.h ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  14:./include/adc.h ****  * copies of the Software, and to permit persons to whom the Software is
  15:./include/adc.h ****  * furnished to do so, subject to the following conditions: @n @n
  16:./include/adc.h ****  *
  17:./include/adc.h ****  * The above copyright notice and this permission notice shall be included in all
  18:./include/adc.h ****  * copies or substantial portions of the Software. @n @n
  19:./include/adc.h **** 
  20:./include/adc.h ****  * THE SOFTWARE IS PROVIDED  "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  21:./include/adc.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  22:./include/adc.h ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  23:./include/adc.h ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  24:./include/adc.h ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  25:./include/adc.h ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  26:./include/adc.h ****  * SOFTWARE.
  27:./include/adc.h ****  * 
  28:./include/adc.h ****  */
  29:./include/adc.h **** #ifndef _ADC_H_
  30:./include/adc.h **** #define _ADC_H_
  31:./include/adc.h **** 
  32:./include/adc.h **** /**
  33:./include/adc.h ****  * @addtogroup adc ADC
  34:./include/adc.h ****  * 
  35:./include/adc.h ****  */
  36:./include/adc.h **** 
  37:./include/adc.h **** /** 
  38:./include/adc.h ****  * @addtogroup public_adc Public
  39:./include/adc.h ****  * @ingroup adc
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 18


  40:./include/adc.h ****  * 
  41:./include/adc.h ****  */
  42:./include/adc.h **** 
  43:./include/adc.h **** #include "system.h"
  44:./include/adc.h **** #include "rcc.h"
  45:./include/adc.h **** 
  46:./include/adc.h **** #define ADC_VREF_P 3300
  47:./include/adc.h **** #define ADC_VREF_N 0
  48:./include/adc.h **** #define ADC_VREF ADC_VREF_P - ADC_VREF_N
  49:./include/adc.h **** 
  50:./include/adc.h **** /*----------------------------------------------------------------------------*/
  51:./include/adc.h **** /* Enums */
  52:./include/adc.h **** /*----------------------------------------------------------------------------*/
  53:./include/adc.h **** 
  54:./include/adc.h **** typedef enum {
  55:./include/adc.h ****     ADC1_RCC = RCC_APB2_ADC1, //!< ADC0 RCC mask
  56:./include/adc.h ****     ADC2_RCC = RCC_APB2_ADC2, //!< ADC1 RCC mask
  57:./include/adc.h ****     ADC3_RCC = RCC_APB2_ADC3  //!< ADC2 RCC mask
  58:./include/adc.h **** } adc_rcc_t;
  59:./include/adc.h **** 
  60:./include/adc.h **** typedef enum {
  61:./include/adc.h ****     ADC_RES_12BITS = 0,
  62:./include/adc.h ****     ADC_RES_10BITS = 1,
  63:./include/adc.h ****     ADC_RES_8BITS  = 2,
  64:./include/adc.h ****     ADC_RES_6BITS  = 3
  65:./include/adc.h **** } adc_res_t;
  66:./include/adc.h **** 
  67:./include/adc.h **** typedef enum {
  68:./include/adc.h ****     ADC_ALIGN_RIGHT = 0,
  69:./include/adc.h ****     ADC_ALIGN_LEFT = 1
  70:./include/adc.h **** } adc_align_t;
  71:./include/adc.h **** 
  72:./include/adc.h **** typedef enum {
  73:./include/adc.h ****     ADC_PRE_2 = 0,
  74:./include/adc.h ****     ADC_PRE_4 = 1,
  75:./include/adc.h ****     ADC_PRE_6 = 2,
  76:./include/adc.h ****     ADC_PRE_8 = 3
  77:./include/adc.h **** } adc_pre_t;
  78:./include/adc.h **** 
  79:./include/adc.h **** typedef enum {
  80:./include/adc.h ****     ADC_INCH_VBAT = ADC_CCR_VBATE,
  81:./include/adc.h ****     ADC_INCH_TVREF = ADC_CCR_TSVREFE
  82:./include/adc.h **** } adc_ich_t;
  83:./include/adc.h **** 
  84:./include/adc.h **** /*----------------------------------------------------------------------------*/
  85:./include/adc.h **** /* Structs */
  86:./include/adc.h **** /*----------------------------------------------------------------------------*/
  87:./include/adc.h **** 
  88:./include/adc.h **** typedef struct {
  89:./include/adc.h ****     uint8_t lenght;
  90:./include/adc.h ****     uint8_t sequece[16];
  91:./include/adc.h ****     uint16_t raw[16];
  92:./include/adc.h ****     uint32_t voltage[16];
  93:./include/adc.h **** } adc_seqr_rgl_t;
  94:./include/adc.h **** 
  95:./include/adc.h **** typedef struct {
  96:./include/adc.h ****     uint8_t lenght;
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 19


  97:./include/adc.h ****     uint8_t sequece[4];
  98:./include/adc.h ****     uint16_t raw[4];
  99:./include/adc.h ****     uint32_t voltage[4];
 100:./include/adc.h **** } adc_seqr_ijt_t;
 101:./include/adc.h **** 
 102:./include/adc.h **** extern adc_seqr_rgl_t adc_sequencer_rgl;
 103:./include/adc.h **** extern adc_seqr_ijt_t adc_sequencer_ijt;
 104:./include/adc.h **** extern const uint16_t resbits_decode[];
 105:./include/adc.h **** 
 106:./include/adc.h **** /*----------------------------------------------------------------------------*/
 107:./include/adc.h **** /* Functions */
 108:./include/adc.h **** /*----------------------------------------------------------------------------*/
 109:./include/adc.h **** 
 110:./include/adc.h **** __FORCE_INLINE void adc_rst(adc_rcc_t mask)
 111:./include/adc.h **** {
 112:./include/adc.h ****     rcc_clk_en_apb2((rcc_apb2_t) mask);
 113:./include/adc.h **** }
 114:./include/adc.h **** 
 115:./include/adc.h **** __FORCE_INLINE void adc_clk_en(adc_rcc_t mask)
 147              		.loc 5 115 21 view .LVU26
 148              	.LBE48:
 116:./include/adc.h **** {
 117:./include/adc.h ****     rcc_clk_en_apb2((rcc_apb2_t) mask);
 149              		.loc 5 117 5 view .LVU27
 150              	.LBB51:
 151              	.LBB49:
 152              	.LBI49:
 386:./include/rcc.h **** }
 387:./include/rcc.h **** 
 388:./include/rcc.h **** /** ### rcc:clock:disable:AHB1
 389:./include/rcc.h ****  * @ingroup public_rcc
 390:./include/rcc.h ****  * @brief Disable clock to AHB1 peripherial/s.
 391:./include/rcc.h ****  * 
 392:./include/rcc.h ****  * Allow disable following clock to peripherials on RCC_APB1ENR register:
 393:./include/rcc.h ****  *  * GPIO[A,B,C,...I].
 394:./include/rcc.h ****  *  * CRC.
 395:./include/rcc.h ****  *  * Backup SRAM interface.
 396:./include/rcc.h ****  *  * CCM Data RAM interface.
 397:./include/rcc.h ****  *  * DMA[1,2].
 398:./include/rcc.h ****  *  * Ethernet [MAC, TX, RX, PTP].
 399:./include/rcc.h ****  *  * USB [HS, HS_ULPI].
 400:./include/rcc.h ****  *
 401:./include/rcc.h ****  * @param[in] mask AHB1 Peripheral/s mask to be disabled.
 402:./include/rcc.h ****  * 
 403:./include/rcc.h ****  * @return None.
 404:./include/rcc.h ****  * 
 405:./include/rcc.h ****  * @note 1. You can disable multiple peripherals at time passing each of them 
 406:./include/rcc.h ****  *          with an OR operator.
 407:./include/rcc.h ****  * @note 2. It is a forced inline function.
 408:./include/rcc.h ****  * 
 409:./include/rcc.h ****  * E.g. @n
 410:./include/rcc.h ****  * For one peripheral disable:
 411:./include/rcc.h ****  * @code
 412:./include/rcc.h ****  * ...
 413:./include/rcc.h ****  * // This disable clock to GPIOA peripheral
 414:./include/rcc.h ****  * rcc_clk_dis_ahb1(RCC_AHB1_GPIOA);
 415:./include/rcc.h ****  * ...
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 20


 416:./include/rcc.h ****  * @endcode
 417:./include/rcc.h ****  * For multiple peripheral disable:
 418:./include/rcc.h ****  * @code
 419:./include/rcc.h ****  * ...
 420:./include/rcc.h ****  * // This disable clock to GPIOA & GPIOB peripheral
 421:./include/rcc.h ****  * rcc_clk_dis_ahb1(RCC_AHB1_GPIOA | RCC_AHB1_GPIOB);
 422:./include/rcc.h ****  * ...
 423:./include/rcc.h ****  * @endcode
 424:./include/rcc.h ****  */
 425:./include/rcc.h **** __FORCE_INLINE void rcc_clk_dis_ahb1(rcc_ahb1_t mask)
 426:./include/rcc.h **** {
 427:./include/rcc.h ****     RCC->AHB1ENR &= ~mask;
 428:./include/rcc.h **** }
 429:./include/rcc.h **** 
 430:./include/rcc.h **** /** ### rcc:reset:AHB1
 431:./include/rcc.h ****  * @ingroup public_rcc
 432:./include/rcc.h ****  * @brief Reset AHB1 peripherial/s.
 433:./include/rcc.h ****  * 
 434:./include/rcc.h ****  * Allow reset following peripherials setting and clear RCC_AHB1RSTR register:
 435:./include/rcc.h ****  *  * GPIO[A,B,C,...I].
 436:./include/rcc.h ****  *  * CRC.
 437:./include/rcc.h ****  *  * Backup SRAM interface.
 438:./include/rcc.h ****  *  * CCM Data RAM interface.
 439:./include/rcc.h ****  *  * DMA[1:2].
 440:./include/rcc.h ****  *  * Ethernet [MAC, TX, RX, PTP].
 441:./include/rcc.h ****  *  * USB [HS, HS_ULPI].
 442:./include/rcc.h ****  *
 443:./include/rcc.h ****  * @param[in] mask AHB1 Peripheral/s mask to be reset.
 444:./include/rcc.h ****  * 
 445:./include/rcc.h ****  * @return None.
 446:./include/rcc.h ****  * 
 447:./include/rcc.h ****  * @note 1. You can reset multiple peripherals at time passing each of them 
 448:./include/rcc.h ****  *          with an OR operator.
 449:./include/rcc.h ****  * @note 2. It is a forced inline function.
 450:./include/rcc.h ****  * 
 451:./include/rcc.h ****  * E.g. @n
 452:./include/rcc.h ****  * For one peripheral reset:
 453:./include/rcc.h ****  * @code
 454:./include/rcc.h ****  * ...
 455:./include/rcc.h ****  * // This reset GPIOA peripheral
 456:./include/rcc.h ****  * rcc_rst_ahb1(RCC_AHB1_GPIOA);
 457:./include/rcc.h ****  * ...
 458:./include/rcc.h ****  * @endcode
 459:./include/rcc.h ****  * For multiple peripheral reset:
 460:./include/rcc.h ****  * @code
 461:./include/rcc.h ****  * ...
 462:./include/rcc.h ****  * // This reset GPIOA & GPIOB peripherals
 463:./include/rcc.h ****  * rcc_rst_ahb1(RCC_AHB1_GPIOA | RCC_AHB1_GPIOB);
 464:./include/rcc.h ****  * ...
 465:./include/rcc.h ****  * @endcode
 466:./include/rcc.h ****  */
 467:./include/rcc.h **** __FORCE_INLINE void rcc_rst_ahb1(rcc_ahb1_t mask)
 468:./include/rcc.h **** {
 469:./include/rcc.h ****     RCC->AHB1RSTR |= mask;
 470:./include/rcc.h ****     RCC->AHB1RSTR &= ~mask;
 471:./include/rcc.h **** }
 472:./include/rcc.h **** 
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 21


 473:./include/rcc.h **** /** ### rcc:clock:enable:AHB2
 474:./include/rcc.h ****  * @ingroup public_rcc
 475:./include/rcc.h ****  * @brief Enable clock to AHB2 peripherial/s.
 476:./include/rcc.h ****  * 
 477:./include/rcc.h ****  * Allow enable following clock to peripherials on RCC_AHB2ENR register:
 478:./include/rcc.h ****  *  * Camera Interface.
 479:./include/rcc.h ****  *  * Cryptographic Modules [If it is available].
 480:./include/rcc.h ****  *  * Hash Modules [If it is available].
 481:./include/rcc.h ****  *  * USB OTG FS.
 482:./include/rcc.h ****  *
 483:./include/rcc.h ****  * @param[in] mask AHB2 Peripheral/s mask to be enabled.
 484:./include/rcc.h ****  * 
 485:./include/rcc.h ****  * @return None.
 486:./include/rcc.h ****  * 
 487:./include/rcc.h ****  * @note 1. You can enable multiple peripherals at time passing each of them 
 488:./include/rcc.h ****  *          with an OR operator.
 489:./include/rcc.h ****  * @note 2. It is a forced inline function.
 490:./include/rcc.h ****  * 
 491:./include/rcc.h ****  * E.g. @n
 492:./include/rcc.h ****  * For one peripheral enable:
 493:./include/rcc.h ****  * @code
 494:./include/rcc.h ****  * ...
 495:./include/rcc.h ****  * // This enable clock to Camera Interface peripheral
 496:./include/rcc.h ****  * rcc_clk_en_ahb2(RCC_AHB2_DCMI);
 497:./include/rcc.h ****  * ...
 498:./include/rcc.h ****  * @endcode
 499:./include/rcc.h ****  * For multiple peripherals enable:
 500:./include/rcc.h ****  * @code
 501:./include/rcc.h ****  * ...
 502:./include/rcc.h ****  * // This enable clock to Camera Interface & Random Number Generator peripherals
 503:./include/rcc.h ****  * rcc_clk_en_ahb2(RCC_AHB2_RNG | RCC_AHB2_DCMI);
 504:./include/rcc.h ****  * ...
 505:./include/rcc.h ****  * @endcode
 506:./include/rcc.h ****  */
 507:./include/rcc.h **** __FORCE_INLINE void rcc_clk_en_ahb2(rcc_ahb2_t mask)
 508:./include/rcc.h **** {
 509:./include/rcc.h ****     RCC->AHB2ENR |= mask;
 510:./include/rcc.h **** }
 511:./include/rcc.h **** 
 512:./include/rcc.h **** /** ### rcc:clock:disable:AHB2
 513:./include/rcc.h ****  * @ingroup public_rcc
 514:./include/rcc.h ****  * @brief Disable clock to AHB2 peripherial/s.
 515:./include/rcc.h ****  * 
 516:./include/rcc.h ****  * Allow disable following clock to peripherials on RCC_AHB2ENR register:
 517:./include/rcc.h ****  *  * Camera Interface.
 518:./include/rcc.h ****  *  * Cryptographic Modules [If it is available].
 519:./include/rcc.h ****  *  * Hash Modules [If it is available].
 520:./include/rcc.h ****  *  * USB OTG FS.
 521:./include/rcc.h ****  *
 522:./include/rcc.h ****  * @param[in] mask AHB2 Peripheral/s mask to be disabled.
 523:./include/rcc.h ****  * 
 524:./include/rcc.h ****  * @return None.
 525:./include/rcc.h ****  * 
 526:./include/rcc.h ****  * @note 1. You can disable multiple peripherals at time passing each of them 
 527:./include/rcc.h ****  *          with an OR operator.
 528:./include/rcc.h ****  * @note 2. It is a forced inline function.
 529:./include/rcc.h ****  * 
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 22


 530:./include/rcc.h ****  * E.g. @n
 531:./include/rcc.h ****  * For one peripheral disable:
 532:./include/rcc.h ****  * @code
 533:./include/rcc.h ****  * ...
 534:./include/rcc.h ****  * // This disable clock to Camera Interface peripheral
 535:./include/rcc.h ****  * rcc_clk_dis_ahb2(RCC_AHB2_DCMI);
 536:./include/rcc.h ****  * ...
 537:./include/rcc.h ****  * @endcode
 538:./include/rcc.h ****  * For multiple peripherals enable:
 539:./include/rcc.h ****  * @code
 540:./include/rcc.h ****  * ...
 541:./include/rcc.h ****  * // This disable clock to Camera Interface & Random Number Generator peripherals
 542:./include/rcc.h ****  * rcc_clk_dis_ahb2(RCC_AHB2_RNG | RCC_AHB2_DCMI);
 543:./include/rcc.h ****  * ...
 544:./include/rcc.h ****  * @endcode
 545:./include/rcc.h ****  */
 546:./include/rcc.h **** __FORCE_INLINE void rcc_clk_dis_ahb2(rcc_ahb2_t mask)
 547:./include/rcc.h **** {
 548:./include/rcc.h ****     RCC->AHB2ENR &= ~mask;
 549:./include/rcc.h **** }
 550:./include/rcc.h **** 
 551:./include/rcc.h **** /** ### rcc:reset:AHB2
 552:./include/rcc.h ****  * @ingroup public_rcc
 553:./include/rcc.h ****  * @brief Reset AHB2 peripherial/s.
 554:./include/rcc.h ****  * 
 555:./include/rcc.h ****  * Allow reset following peripherials setting and clear RCC_AHB2RSTR register:
 556:./include/rcc.h ****  *  * Camera Interface.
 557:./include/rcc.h ****  *  * Cryptographic Modules [If it is available].
 558:./include/rcc.h ****  *  * Hash Modules [If it is available].
 559:./include/rcc.h ****  *  * USB OTG FS.
 560:./include/rcc.h ****  *
 561:./include/rcc.h ****  * @param[in] mask AHB2 Peripheral/s mask to be reset.
 562:./include/rcc.h ****  * 
 563:./include/rcc.h ****  * @return None.
 564:./include/rcc.h ****  * 
 565:./include/rcc.h ****  * @note 1. You can reset multiple peripherals at time passing each of them
 566:./include/rcc.h ****  *          with an OR operator.
 567:./include/rcc.h ****  * @note 2. It is a forced inline function.
 568:./include/rcc.h ****  * 
 569:./include/rcc.h ****  * E.g. @n
 570:./include/rcc.h ****  * For one peripheral reset:
 571:./include/rcc.h ****  * @code
 572:./include/rcc.h ****  * ...
 573:./include/rcc.h ****  * // This resets Camera Interface peripheral
 574:./include/rcc.h ****  * rcc_rst_ahb2(RCC_AHB2_DCMI);
 575:./include/rcc.h ****  * ...
 576:./include/rcc.h ****  * @endcode
 577:./include/rcc.h ****  * For multiple peripherals enable:
 578:./include/rcc.h ****  * @code
 579:./include/rcc.h ****  * ...
 580:./include/rcc.h ****  * // This resets Camera Interface & Random Number Generator peripherals
 581:./include/rcc.h ****  * rcc_rst_ahb2(RCC_AHB2_RNG | RCC_AHB2_DCMI);
 582:./include/rcc.h ****  * ...
 583:./include/rcc.h ****  * @endcode
 584:./include/rcc.h ****  */
 585:./include/rcc.h **** __FORCE_INLINE void rcc_rst_ahb2(rcc_ahb2_t mask)
 586:./include/rcc.h **** {
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 23


 587:./include/rcc.h ****     RCC->AHB2RSTR |= mask;
 588:./include/rcc.h ****     RCC->AHB2RSTR &= ~mask;
 589:./include/rcc.h **** }
 590:./include/rcc.h **** 
 591:./include/rcc.h **** /** ### rcc:clock:enable:AHB3
 592:./include/rcc.h ****  * @ingroup public_rcc
 593:./include/rcc.h ****  * @brief Enable clock to AHB3 peripherial/s.
 594:./include/rcc.h ****  * 
 595:./include/rcc.h ****  * Allow enable following clock to peripherials on RCC_AHB3ENR register:
 596:./include/rcc.h ****  *  * Flexible static memory controller.
 597:./include/rcc.h ****  *
 598:./include/rcc.h ****  * @param[in] mask AHB3 Peripheral/s mask to be enabled.
 599:./include/rcc.h ****  * 
 600:./include/rcc.h ****  * @return None.
 601:./include/rcc.h ****  * 
 602:./include/rcc.h ****  * @note It is a forced inline function.
 603:./include/rcc.h ****  * 
 604:./include/rcc.h ****  * E.g. @n
 605:./include/rcc.h ****  * @code
 606:./include/rcc.h ****  * ...
 607:./include/rcc.h ****  * // This enable clock to FSMC peripheral
 608:./include/rcc.h ****  * rcc_clk_en_ahb3(RCC_AHB3_FSMC);
 609:./include/rcc.h ****  * ...
 610:./include/rcc.h ****  * @endcode
 611:./include/rcc.h ****  */
 612:./include/rcc.h **** __FORCE_INLINE void rcc_clk_en_ahb3(rcc_ahb3_t mask)
 613:./include/rcc.h **** {
 614:./include/rcc.h ****     RCC->AHB3ENR |= mask;
 615:./include/rcc.h **** }
 616:./include/rcc.h **** 
 617:./include/rcc.h **** /** ### rcc:clock:disable:AHB3
 618:./include/rcc.h ****  * @ingroup public_rcc
 619:./include/rcc.h ****  * @brief Disable clock to AHB3 peripherial/s.
 620:./include/rcc.h ****  * 
 621:./include/rcc.h ****  * Allow disable following clock to peripherials on RCC_AHB3ENR register:
 622:./include/rcc.h ****  *  * Flexible static memory controller
 623:./include/rcc.h ****  *
 624:./include/rcc.h ****  * @param[in] mask AHB3 Peripheral/s mask to be disabled.
 625:./include/rcc.h ****  * 
 626:./include/rcc.h ****  * @return None.
 627:./include/rcc.h ****  * 
 628:./include/rcc.h ****  * @note It is a forced inline function.
 629:./include/rcc.h ****  * 
 630:./include/rcc.h ****  * E.g. @n
 631:./include/rcc.h ****  * @code
 632:./include/rcc.h ****  * ...
 633:./include/rcc.h ****  * // This disable clock to GPIOA peripheral
 634:./include/rcc.h ****  * rcc_clk_dis_ahb3(RCC_AHB3_FSMC);
 635:./include/rcc.h ****  * ...
 636:./include/rcc.h ****  * @endcode
 637:./include/rcc.h ****  */
 638:./include/rcc.h **** __FORCE_INLINE void rcc_clk_dis_ahb3(rcc_ahb3_t mask)
 639:./include/rcc.h **** {
 640:./include/rcc.h ****     RCC->AHB3ENR &= ~mask;
 641:./include/rcc.h **** }
 642:./include/rcc.h **** 
 643:./include/rcc.h **** /** ### rcc:reset:AHB3
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 24


 644:./include/rcc.h ****  * @ingroup public_rcc
 645:./include/rcc.h ****  * @brief Reset AHB3 peripherial/s.
 646:./include/rcc.h ****  * 
 647:./include/rcc.h ****  * Allow reset following peripherials setting and clear RCC_AHB3RSTR register:
 648:./include/rcc.h ****  *  * Flexible static memory controller.
 649:./include/rcc.h ****  *
 650:./include/rcc.h ****  * @param[in] mask AHB3 Peripheral/s mask to be reset.
 651:./include/rcc.h ****  * 
 652:./include/rcc.h ****  * @return None.
 653:./include/rcc.h ****  * 
 654:./include/rcc.h ****  * @note It is a forced inline function.
 655:./include/rcc.h ****  * 
 656:./include/rcc.h ****  * E.g. @n
 657:./include/rcc.h ****  * @code
 658:./include/rcc.h ****  * ...
 659:./include/rcc.h ****  * // This reset GPIOA peripheral
 660:./include/rcc.h ****  * rcc_rst_ahb3(RCC_AHB3_FSMC);
 661:./include/rcc.h ****  * ...
 662:./include/rcc.h ****  * @endcode
 663:./include/rcc.h ****  */
 664:./include/rcc.h **** __FORCE_INLINE void rcc_rst_ahb3(rcc_ahb3_t mask)
 665:./include/rcc.h **** {
 666:./include/rcc.h ****     RCC->AHB3RSTR |= mask;
 667:./include/rcc.h ****     RCC->AHB3RSTR &= ~mask;
 668:./include/rcc.h **** }
 669:./include/rcc.h **** 
 670:./include/rcc.h **** /** ### rcc:clock:enable:APB1
 671:./include/rcc.h ****  * @ingroup public_rcc
 672:./include/rcc.h ****  * @brief Enable clock to APB1 peripherial/s.
 673:./include/rcc.h ****  * 
 674:./include/rcc.h ****  * Allow enable following clock to peripherials on RCC_APB1ENR register:
 675:./include/rcc.h ****  *  * Timmers TIM[2,3,4...7,12,13,14].
 676:./include/rcc.h ****  *  * Window Watch Dog WWD.
 677:./include/rcc.h ****  *  * SPI[2,3].
 678:./include/rcc.h ****  *  * USART[2,3,4*,5*] * UART ONLY.
 679:./include/rcc.h ****  *  * I²C[1,2,3].
 680:./include/rcc.h ****  *  * CAN[1,2].
 681:./include/rcc.h ****  *  * Power Interface.
 682:./include/rcc.h ****  *  * DAC.
 683:./include/rcc.h ****  *
 684:./include/rcc.h ****  * @param[in] mask APB1 Peripheral/s mask to be enabled.
 685:./include/rcc.h ****  * 
 686:./include/rcc.h ****  * @return None.
 687:./include/rcc.h ****  * 
 688:./include/rcc.h ****  * @note 1. You can enable multiple peripherals at time passing each of them 
 689:./include/rcc.h ****  *          with an OR operator.
 690:./include/rcc.h ****  * @note 2. It is a forced inline function.
 691:./include/rcc.h ****  * 
 692:./include/rcc.h ****  * E.g. @n
 693:./include/rcc.h ****  * For one peripheral enable:
 694:./include/rcc.h ****  * @code
 695:./include/rcc.h ****  * ...
 696:./include/rcc.h ****  * // This enable clock to DAC peripheral
 697:./include/rcc.h ****  * rcc_clk_en_apb1(RCC_APB1_DAC);
 698:./include/rcc.h ****  * ...
 699:./include/rcc.h ****  * @endcode
 700:./include/rcc.h ****  * For multiple peripherals enable:
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 25


 701:./include/rcc.h ****  * @code
 702:./include/rcc.h ****  * ...
 703:./include/rcc.h ****  * // This enable clock to DAC & TIM2 peripheral
 704:./include/rcc.h ****  * rcc_clk_en_apb1(RCC_APB1_DAC | RCC_APB1_TIM2);
 705:./include/rcc.h ****  * ...
 706:./include/rcc.h ****  * @endcode
 707:./include/rcc.h ****  */
 708:./include/rcc.h **** __FORCE_INLINE void rcc_clk_en_apb1(rcc_apb1_t mask)
 709:./include/rcc.h **** {
 710:./include/rcc.h ****     RCC->APB1ENR |= mask;
 711:./include/rcc.h **** }
 712:./include/rcc.h **** 
 713:./include/rcc.h **** /** ### rcc:clock:disable:APB1
 714:./include/rcc.h ****  * @ingroup public_rcc
 715:./include/rcc.h ****  * @brief Disable clock to APB1 peripherial/s.
 716:./include/rcc.h ****  * 
 717:./include/rcc.h ****  * Allow disable following clock to peripherials on RCC_APB1ENR register:
 718:./include/rcc.h ****  *  * Timmers TIM[2,3,4...7,12,13,14].
 719:./include/rcc.h ****  *  * Window Watch Dog.
 720:./include/rcc.h ****  *  * SPI[2,3].
 721:./include/rcc.h ****  *  * USART[2,3,4*,5*] * UART ONLY.
 722:./include/rcc.h ****  *  * I²C[1,2,3].
 723:./include/rcc.h ****  *  * CAN[1,2].
 724:./include/rcc.h ****  *  * Power Interface.
 725:./include/rcc.h ****  *  * DAC.
 726:./include/rcc.h ****  *
 727:./include/rcc.h ****  * @param[in] mask APB1 Peripheral/s mask to be disabled.
 728:./include/rcc.h ****  * 
 729:./include/rcc.h ****  * @return None.
 730:./include/rcc.h ****  * 
 731:./include/rcc.h ****  * @note 1. You can disable multiple peripherals at time passing each of them 
 732:./include/rcc.h ****  *          with an OR operator.
 733:./include/rcc.h ****  * @note 2. It is a forced inline function.
 734:./include/rcc.h ****  * 
 735:./include/rcc.h ****  * E.g. @n
 736:./include/rcc.h ****  * For one peripheral disable:
 737:./include/rcc.h ****  * @code
 738:./include/rcc.h ****  * ...
 739:./include/rcc.h ****  * // This disable clock to DAC peripheral
 740:./include/rcc.h ****  * rcc_clk_dis_apb1(RCC_APB1_DAC);
 741:./include/rcc.h ****  * ...
 742:./include/rcc.h ****  * @endcode
 743:./include/rcc.h ****  * For multiple peripherals enable:
 744:./include/rcc.h ****  * @code
 745:./include/rcc.h ****  * ...
 746:./include/rcc.h ****  * // This disable clock to DAC & TIM2 peripherals
 747:./include/rcc.h ****  * rcc_clk_dis_apb1(RCC_APB1_DAC | RCC_APB1_TIM2);
 748:./include/rcc.h ****  * ...
 749:./include/rcc.h ****  * @endcode
 750:./include/rcc.h ****  */
 751:./include/rcc.h **** __FORCE_INLINE void rcc_clk_dis_apb1(rcc_apb1_t mask)
 752:./include/rcc.h **** {
 753:./include/rcc.h ****     RCC->APB1ENR &= ~mask;
 754:./include/rcc.h **** }
 755:./include/rcc.h **** 
 756:./include/rcc.h **** /** ### rcc:reset:APB1
 757:./include/rcc.h ****  * @ingroup public_rcc
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 26


 758:./include/rcc.h ****  * @brief Reset APB1 peripherial/s.
 759:./include/rcc.h ****  * 
 760:./include/rcc.h ****  * Allow reset following peripherials setting and clear RCC_APB1RSTR register:
 761:./include/rcc.h ****  *  * Timmers TIM[2,3,4...7,12,13,14].
 762:./include/rcc.h ****  *  * Window Watch Dog.
 763:./include/rcc.h ****  *  * SPI[2,3].
 764:./include/rcc.h ****  *  * USART[2,3,4*,5*] * UART ONLY.
 765:./include/rcc.h ****  *  * I²C[1,2,3].
 766:./include/rcc.h ****  *  * CAN[1,2].
 767:./include/rcc.h ****  *  * Power Interface.
 768:./include/rcc.h ****  *  * DAC.
 769:./include/rcc.h ****  *
 770:./include/rcc.h ****  * @param[in] mask APB1 Peripheral/s mask to be reset.
 771:./include/rcc.h ****  * 
 772:./include/rcc.h ****  * @return None.
 773:./include/rcc.h ****  * 
 774:./include/rcc.h ****  * @note 1. You can reset multiple peripherals at time passing each of them with 
 775:./include/rcc.h ****  *          an OR operator.
 776:./include/rcc.h ****  * @note 2. It is a forced inline function.
 777:./include/rcc.h ****  * 
 778:./include/rcc.h ****  * E.g. @n
 779:./include/rcc.h ****  * For one peripheral reset:
 780:./include/rcc.h ****  * @code
 781:./include/rcc.h ****  * ...
 782:./include/rcc.h ****  * // This reset DAC peripheral
 783:./include/rcc.h ****  * rcc_rst_apb1(RCC_APB1_DAC);
 784:./include/rcc.h ****  * ...
 785:./include/rcc.h ****  * @endcode
 786:./include/rcc.h ****  * For multiple peripherals reset:
 787:./include/rcc.h ****  * @code
 788:./include/rcc.h ****  * ...
 789:./include/rcc.h ****  * // This reset DAC & TIM2 peripherals
 790:./include/rcc.h ****  * rcc_rst_apb1(RCC_APB1_DAC | RCC_APB1_TIM2);
 791:./include/rcc.h ****  * ...
 792:./include/rcc.h ****  * @endcode
 793:./include/rcc.h ****  */
 794:./include/rcc.h **** __FORCE_INLINE void rcc_rst_apb1(rcc_apb1_t mask)
 795:./include/rcc.h **** {
 796:./include/rcc.h ****     RCC->APB1RSTR |= mask;
 797:./include/rcc.h ****     RCC->APB1RSTR &= ~mask;
 798:./include/rcc.h **** }
 799:./include/rcc.h **** 
 800:./include/rcc.h **** /** ### rcc:clock:enable:APB2
 801:./include/rcc.h ****  * @ingroup public_rcc
 802:./include/rcc.h ****  * @brief Enable clock to APB2 peripherial/s.
 803:./include/rcc.h ****  * 
 804:./include/rcc.h ****  * Allow enable following clock to peripherials on RCC_APB2ENR register:
 805:./include/rcc.h ****  *  * Timmers TIM[1,8,9,10,11].
 806:./include/rcc.h ****  *  * USART[1,6].
 807:./include/rcc.h ****  *  * ADC[1,2,3].
 808:./include/rcc.h ****  *  * SDIO (SD Interface).
 809:./include/rcc.h ****  *  * SPI[1].
 810:./include/rcc.h ****  *  * System Configuration Controller SYSCF.
 811:./include/rcc.h ****  *
 812:./include/rcc.h ****  * @param[in] mask APB2 Peripheral/s mask to be enabled.
 813:./include/rcc.h ****  * 
 814:./include/rcc.h ****  * @return None.
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 27


 815:./include/rcc.h ****  * 
 816:./include/rcc.h ****  * @note 1. You can enable multiple peripherals at time passing each of them 
 817:./include/rcc.h ****  *          with an OR operator.
 818:./include/rcc.h ****  * @note 2. It is a forced inline function.
 819:./include/rcc.h ****  * 
 820:./include/rcc.h ****  * E.g. @n
 821:./include/rcc.h ****  * For one peripheral enable:
 822:./include/rcc.h ****  * @code
 823:./include/rcc.h ****  * ...
 824:./include/rcc.h ****  * // This enable clock to USART1 peripheral
 825:./include/rcc.h ****  * rcc_clk_en_apb2(RCC_APB2_USART1);
 826:./include/rcc.h ****  * ...
 827:./include/rcc.h ****  * @endcode
 828:./include/rcc.h ****  * For multiple peripherals enable:
 829:./include/rcc.h ****  * @code
 830:./include/rcc.h ****  * ...
 831:./include/rcc.h ****  * // This enable clock to ADC1 & USART1 peripherals
 832:./include/rcc.h ****  * rcc_clk_en_apb2(RCC_APB2_ADC1 | RCC_APB2_USART1);
 833:./include/rcc.h ****  * ...
 834:./include/rcc.h ****  * @endcode
 835:./include/rcc.h ****  */
 836:./include/rcc.h **** __FORCE_INLINE void rcc_clk_en_apb2(rcc_apb2_t mask)
 153              		.loc 4 836 21 view .LVU28
 154              	.LBB50:
 837:./include/rcc.h **** {
 838:./include/rcc.h ****     RCC->APB2ENR |= mask;
 155              		.loc 4 838 5 view .LVU29
 156              		.loc 4 838 18 is_stmt 0 view .LVU30
 157 0018 7B6C     		ldr	r3, [r7, #68]
 158 001a 43F4E063 		orr	r3, r3, #1792
 159 001e 7B64     		str	r3, [r7, #68]
 160              	.LVL5:
 161              		.loc 4 838 18 view .LVU31
 162              	.LBE50:
 163              	.LBE49:
 164              	.LBE51:
  44:src/main.c    ****     adc_sequencer_rgl.sequece[0] = 0;
 165              		.loc 2 44 5 is_stmt 1 view .LVU32
 166              	.LBB52:
 167              	.LBI52:
 118:./include/adc.h **** }
 119:./include/adc.h **** 
 120:./include/adc.h **** __FORCE_INLINE void adc_clk_dis(adc_rcc_t mask)
 168              		.loc 5 120 21 view .LVU33
 169              	.LBE52:
 121:./include/adc.h **** {
 122:./include/adc.h ****     rcc_clk_dis_apb2((rcc_apb2_t) mask);
 170              		.loc 5 122 5 view .LVU34
 171              	.LBB57:
 172              	.LBB53:
 173              	.LBI53:
 839:./include/rcc.h **** }
 840:./include/rcc.h **** 
 841:./include/rcc.h **** /** ### rcc:clock:disable:APB2
 842:./include/rcc.h ****  * @ingroup public_rcc
 843:./include/rcc.h ****  * @brief Disable clock to APB2 peripherial/s.
 844:./include/rcc.h ****  * 
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 28


 845:./include/rcc.h ****  * Allow disable following clock to peripherials on RCC_APB2ENR register:
 846:./include/rcc.h ****  *  * Timmers TIM[1,8,9,10,11].
 847:./include/rcc.h ****  *  * USART[1,6].
 848:./include/rcc.h ****  *  * ADC[1,2,3].
 849:./include/rcc.h ****  *  * SDIO (SD Interface).
 850:./include/rcc.h ****  *  * SPI[1].
 851:./include/rcc.h ****  *  * System Configuration Controller SYSCF.
 852:./include/rcc.h ****  *
 853:./include/rcc.h ****  * @param[in] mask APB2 Peripheral/s mask to be disabled.
 854:./include/rcc.h ****  * 
 855:./include/rcc.h ****  * @return None.
 856:./include/rcc.h ****  * 
 857:./include/rcc.h ****  * @note 1. You can disable multiple peripherals at time passing each of them 
 858:./include/rcc.h ****  *          with an OR operator.
 859:./include/rcc.h ****  * @note 2. It is a forced inline function.
 860:./include/rcc.h ****  * 
 861:./include/rcc.h ****  * E.g. @n
 862:./include/rcc.h ****  * For one peripheral disable:
 863:./include/rcc.h ****  * @code
 864:./include/rcc.h ****  * ...
 865:./include/rcc.h ****  * // This disable clock to USART1 peripheral
 866:./include/rcc.h ****  * rcc_clk_en_apb2(RCC_APB2_USART1);
 867:./include/rcc.h ****  * ...
 868:./include/rcc.h ****  * @endcode
 869:./include/rcc.h ****  * For multiple peripherals disable:
 870:./include/rcc.h ****  * @code
 871:./include/rcc.h ****  * ...
 872:./include/rcc.h ****  * // This disable clock to ADC1 & USART1 peripherals
 873:./include/rcc.h ****  * rcc_clk_en_apb2(RCC_APB2_ADC1 | RCC_APB2_USART1);
 874:./include/rcc.h ****  * ...
 875:./include/rcc.h ****  * @endcode
 876:./include/rcc.h ****  */
 877:./include/rcc.h **** __FORCE_INLINE void rcc_clk_dis_apb2(rcc_apb2_t mask)
 174              		.loc 4 877 21 view .LVU35
 175              	.LBB54:
 878:./include/rcc.h **** {
 879:./include/rcc.h ****     RCC->APB2ENR &= ~mask;
 176              		.loc 4 879 5 view .LVU36
 177              		.loc 4 879 18 is_stmt 0 view .LVU37
 178 0020 7B6C     		ldr	r3, [r7, #68]
 179              	.LBE54:
 180              	.LBE53:
 181              	.LBE57:
  48:src/main.c    ****     adc_config_seq_rgl(ADC1);
 182              		.loc 2 48 30 view .LVU38
 183 0022 2E46     		mov	r6, r5
 184              	.LBB58:
 185              	.LBB56:
 186              	.LBB55:
 187              		.loc 4 879 18 view .LVU39
 188 0024 23F4C063 		bic	r3, r3, #1536
 189 0028 7B64     		str	r3, [r7, #68]
 190              	.LVL6:
 191              		.loc 4 879 18 view .LVU40
 192              	.LBE55:
 193              	.LBE56:
 194              	.LBE58:
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 29


  45:src/main.c    ****     adc_sequencer_rgl.sequece[1] = 17;
 195              		.loc 2 45 5 is_stmt 1 view .LVU41
  46:src/main.c    ****     adc_sequencer_rgl.sequece[2] = 16;
 196              		.loc 2 46 5 view .LVU42
  47:src/main.c    ****     adc_sequencer_rgl.lenght = 3;
 197              		.loc 2 47 5 view .LVU43
  48:src/main.c    ****     adc_config_seq_rgl(ADC1);
 198              		.loc 2 48 5 view .LVU44
  48:src/main.c    ****     adc_config_seq_rgl(ADC1);
 199              		.loc 2 48 30 is_stmt 0 view .LVU45
 200 002a 1E4B     		ldr	r3, .L11+16
 201 002c 46F8123B 		str	r3, [r6], #18
 202              		.loc 2 49 5 is_stmt 1 view .LVU46
 203 0030 2046     		mov	r0, r4
 204 0032 FFF7FEFF 		bl	adc_config_seq_rgl
 205              	.LVL7:
  50:src/main.c    **** 
  51:src/main.c    ****     adc_config_ind_scan(
 206              		.loc 2 51 5 view .LVU47
 207 0036 0022     		movs	r2, #0
 208 0038 0323     		movs	r3, #3
 209 003a 1146     		mov	r1, r2
 210 003c 2046     		mov	r0, r4
 211 003e FFF7FEFF 		bl	adc_config_ind_scan
 212              	.LVL8:
  52:src/main.c    ****         ADC1, ADC_RES_12BITS, ADC_ALIGN_RIGHT, ADC_PRE_8
  53:src/main.c    ****     );
  54:src/main.c    ****     
  55:src/main.c    ****     adc_internalch_en(ADC_INCH_TVREF);
 213              		.loc 2 55 5 view .LVU48
 214              	.LBB59:
 215              	.LBI59:
 123:./include/adc.h **** }
 124:./include/adc.h **** 
 125:./include/adc.h **** __FORCE_INLINE void adc_power_on(ADC_TypeDef *adc)
 126:./include/adc.h **** {
 127:./include/adc.h ****     adc->CR2 |= ADC_CR2_ADON;
 128:./include/adc.h **** }
 129:./include/adc.h **** 
 130:./include/adc.h **** __FORCE_INLINE void adc_power_down(ADC_TypeDef *adc)
 131:./include/adc.h **** {
 132:./include/adc.h ****     adc->CR2 &= ~ADC_CR2_ADON;
 133:./include/adc.h **** }
 134:./include/adc.h **** 
 135:./include/adc.h **** __FORCE_INLINE void adc_config_seq_sgl_ch(ADC_TypeDef *adc, uint8_t channel)
 136:./include/adc.h **** {
 137:./include/adc.h ****     adc->SQR1 &= ~(0x0F << ADC_SQR1_L_Pos); /* Clear lenght */
 138:./include/adc.h ****     adc->SQR3 &= ~(0x1F);    /* Clear first sequence */
 139:./include/adc.h ****     adc->SQR3 |= channel;   /* Assign desired channel to read */
 140:./include/adc.h **** }
 141:./include/adc.h **** 
 142:./include/adc.h **** __FORCE_INLINE uint16_t adc_read_ind_sgl(ADC_TypeDef *adc)
 143:./include/adc.h **** {
 144:./include/adc.h ****     adc->CR2 |= ADC_CR2_SWSTART;
 145:./include/adc.h ****     while((adc->SR & ADC_SR_EOC) == 0);
 146:./include/adc.h ****     uint16_t raw = adc->DR;
 147:./include/adc.h ****     adc->SR &= ~ADC_SR_STRT;
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 30


 148:./include/adc.h ****     return raw;
 149:./include/adc.h **** }
 150:./include/adc.h **** 
 151:./include/adc.h **** __FORCE_INLINE uint32_t adc_get_voltage(uint16_t raw, adc_res_t resolution)
 152:./include/adc.h **** {
 153:./include/adc.h ****     return (raw * ADC_VREF) / resbits_decode[resolution];
 154:./include/adc.h **** }
 155:./include/adc.h **** 
 156:./include/adc.h **** void adc_config_ind_scan(
 157:./include/adc.h ****     ADC_TypeDef *adc, adc_res_t resolution, adc_align_t alignment, 
 158:./include/adc.h ****     adc_pre_t prescaler
 159:./include/adc.h **** );
 160:./include/adc.h **** 
 161:./include/adc.h **** void adc_config_seq_rgl(ADC_TypeDef *adc);
 162:./include/adc.h **** 
 163:./include/adc.h **** void adc_read_ind_scan(ADC_TypeDef *adc);
 164:./include/adc.h **** 
 165:./include/adc.h **** __FORCE_INLINE void adc_internalch_en(adc_ich_t mask)
 216              		.loc 5 165 21 view .LVU49
 217              	.LBB60:
 166:./include/adc.h **** {
 167:./include/adc.h ****     ADC->CCR |= mask;
 218              		.loc 5 167 5 view .LVU50
 219              		.loc 5 167 14 is_stmt 0 view .LVU51
 220 0042 194A     		ldr	r2, .L11+20
 221 0044 5368     		ldr	r3, [r2, #4]
 222 0046 43F40003 		orr	r3, r3, #8388608
 223 004a 5360     		str	r3, [r2, #4]
 224              	.LVL9:
 225              		.loc 5 167 14 view .LVU52
 226              	.LBE60:
 227              	.LBE59:
  56:src/main.c    ****     adc_power_on(ADC1);
 228              		.loc 2 56 5 is_stmt 1 view .LVU53
 229              	.LBB61:
 230              	.LBI61:
 125:./include/adc.h **** {
 231              		.loc 5 125 21 view .LVU54
 232              	.LBB62:
 127:./include/adc.h **** }
 233              		.loc 5 127 5 view .LVU55
 127:./include/adc.h **** }
 234              		.loc 5 127 14 is_stmt 0 view .LVU56
 235 004c A368     		ldr	r3, [r4, #8]
 236              	.LBE62:
 237              	.LBE61:
 238              	.LBB65:
 239              	.LBB66:
 240              	.LBB67:
 241              	.LBB68:
 153:./include/adc.h **** }
 242              		.loc 5 153 45 view .LVU57
 243 004e 174A     		ldr	r2, .L11+24
 244              	.LBE68:
 245              	.LBE67:
 246              	.LBE66:
 247              	.LBE65:
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 31


 248              	.LBB80:
 249              	.LBB63:
 127:./include/adc.h **** }
 250              		.loc 5 127 14 view .LVU58
 251 0050 43F00103 		orr	r3, r3, #1
 252              	.LBE63:
 253              	.LBE80:
 254              	.LBB81:
 255              	.LBB77:
 256              	.LBB73:
 257              	.LBB69:
 153:./include/adc.h **** }
 258              		.loc 5 153 45 view .LVU59
 259 0054 B2F80090 		ldrh	r9, [r2]
 260              	.LBE69:
 261              	.LBE73:
 262              	.LBE77:
 263              	.LBE81:
 264              	.LBB82:
 265              	.LBB64:
 127:./include/adc.h **** }
 266              		.loc 5 127 14 view .LVU60
 267 0058 A360     		str	r3, [r4, #8]
 268 005a 0227     		movs	r7, #2
 269              	.LBE64:
 270              	.LBE82:
 271              	.LBB83:
 272              	.LBB78:
 273              	.LBB74:
 274              	.LBB70:
 153:./include/adc.h **** }
 275              		.loc 5 153 19 view .LVU61
 276 005c 40F6E448 		movw	r8, #3300
 277              	.LVL10:
 278              	.L6:
 153:./include/adc.h **** }
 279              		.loc 5 153 19 view .LVU62
 280              	.LBE70:
 281              	.LBE74:
 282              	.LBE78:
 283              	.LBE83:
  57:src/main.c    **** 
  58:src/main.c    ****     while(1) {
 284              		.loc 2 58 5 is_stmt 1 discriminator 1 view .LVU63
  59:src/main.c    ****         adc_read_ind_scan(ADC1);
 285              		.loc 2 59 9 discriminator 1 view .LVU64
 286 0060 2046     		mov	r0, r4
 287 0062 FFF7FEFF 		bl	adc_read_ind_scan
 288              	.LVL11:
  60:src/main.c    ****         adc_seq_get_voltages(ADC_RES_12BITS);
 289              		.loc 2 60 9 discriminator 1 view .LVU65
 290              	.LBB84:
 291              	.LBI65:
 168:./include/adc.h **** }
 169:./include/adc.h **** 
 170:./include/adc.h **** __FORCE_INLINE void adc_internalch_dis(adc_ich_t mask)
 171:./include/adc.h **** {
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 32


 172:./include/adc.h ****     ADC->CCR &= ~mask;
 173:./include/adc.h **** }
 174:./include/adc.h **** 
 175:./include/adc.h **** __FORCE_INLINE void adc_seq_get_voltages(adc_res_t resolution)
 292              		.loc 5 175 21 discriminator 1 view .LVU66
 293              	.LBE84:
 176:./include/adc.h **** {
 177:./include/adc.h ****     for (uint8_t i = 0; i < adc_sequencer_rgl.lenght; i++)
 294              		.loc 5 177 5 discriminator 1 view .LVU67
 295              	.LBB85:
 296              	.LBB79:
 297              		.loc 5 177 10 discriminator 1 view .LVU68
 298              		.loc 5 177 25 discriminator 1 view .LVU69
 299              		.loc 5 177 46 is_stmt 0 discriminator 1 view .LVU70
 300 0066 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 301              		.loc 5 177 5 discriminator 1 view .LVU71
 302 0068 80B1     		cbz	r0, .L8
 303 006a 114A     		ldr	r2, .L11+28
 304 006c 0138     		subs	r0, r0, #1
 305 006e C0B2     		uxtb	r0, r0
 306 0070 02F12001 		add	r1, r2, #32
 307 0074 17FB0060 		smlabb	r0, r7, r0, r6
 308              	.LVL12:
 309              	.L7:
 178:./include/adc.h ****         adc_sequencer_rgl.voltage[i] = 
 310              		.loc 5 178 9 is_stmt 1 view .LVU72
 311              	.LBB75:
 312              	.LBI67:
 151:./include/adc.h **** {
 313              		.loc 5 151 25 view .LVU73
 314              	.LBB71:
 153:./include/adc.h **** }
 315              		.loc 5 153 5 view .LVU74
 153:./include/adc.h **** }
 316              		.loc 5 153 19 is_stmt 0 view .LVU75
 317 0078 32F8023F 		ldrh	r3, [r2, #2]!
 318              	.LVL13:
 153:./include/adc.h **** }
 319              		.loc 5 153 19 view .LVU76
 320              	.LBE71:
 321              	.LBE75:
 177:./include/adc.h ****         adc_sequencer_rgl.voltage[i] = 
 322              		.loc 5 177 5 view .LVU77
 323 007c 8242     		cmp	r2, r0
 324              	.LBB76:
 325              	.LBB72:
 153:./include/adc.h **** }
 326              		.loc 5 153 19 view .LVU78
 327 007e 08FB03F3 		mul	r3, r8, r3
 153:./include/adc.h **** }
 328              		.loc 5 153 29 view .LVU79
 329 0082 B3FBF9F3 		udiv	r3, r3, r9
 330              	.LBE72:
 331              	.LBE76:
 332              		.loc 5 178 38 view .LVU80
 333 0086 41F8043F 		str	r3, [r1, #4]!
 177:./include/adc.h ****         adc_sequencer_rgl.voltage[i] = 
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 33


 334              		.loc 5 177 55 is_stmt 1 view .LVU81
 335              	.LVL14:
 177:./include/adc.h ****         adc_sequencer_rgl.voltage[i] = 
 336              		.loc 5 177 25 view .LVU82
 177:./include/adc.h ****         adc_sequencer_rgl.voltage[i] = 
 337              		.loc 5 177 5 is_stmt 0 view .LVU83
 338 008a F5D1     		bne	.L7
 339              	.LVL15:
 340              	.L8:
 177:./include/adc.h ****         adc_sequencer_rgl.voltage[i] = 
 341              		.loc 5 177 5 view .LVU84
 342              	.LBE79:
 343              	.LBE85:
  61:src/main.c    ****         delay_ms(100);
 344              		.loc 2 61 9 is_stmt 1 view .LVU85
 345 008c 6420     		movs	r0, #100
 346 008e FFF7FEFF 		bl	delay_ms
 347              	.LVL16:
  58:src/main.c    ****         adc_read_ind_scan(ADC1);
 348              		.loc 2 58 10 view .LVU86
  59:src/main.c    ****         adc_seq_get_voltages(ADC_RES_12BITS);
 349              		.loc 2 59 9 is_stmt 0 view .LVU87
 350 0092 E5E7     		b	.L6
 351              	.L12:
 352              		.align	2
 353              	.L11:
 354 0094 00380240 		.word	1073887232
 355 0098 00000240 		.word	1073872896
 356 009c 00000000 		.word	adc_sequencer_rgl
 357 00a0 00200140 		.word	1073815552
 358 00a4 03001110 		.word	269549571
 359 00a8 00230140 		.word	1073816320
 360 00ac 00000000 		.word	resbits_decode
 361 00b0 10000000 		.word	adc_sequencer_rgl+16
 362              		.cfi_endproc
 363              	.LFE170:
 365              		.text
 366              	.Letext0:
 367              		.file 6 "e:\\david\\documents\\megasync\\trabajo\\stm\\.dspboardsdk\\gcc\\arm-none-eabi\\include\\
 368              		.file 7 "e:\\david\\documents\\megasync\\trabajo\\stm\\.dspboardsdk\\gcc\\arm-none-eabi\\include\\
 369              		.file 8 "E:/David/Documents/MEGAsync/Trabajo/STM/.dspboardSDK/packs/STM32CubeF4/Drivers/CMSIS/Devi
 370              		.file 9 "./include/delay.h"
 371              		.file 10 "E:/David/Documents/MEGAsync/Trabajo/STM/.dspboardSDK/packs/STM32CubeF4/Drivers/CMSIS/Dev
ARM GAS  C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s 			page 34


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s:20     .text.startup.sys_clk_update:00000000 $t
C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s:26     .text.startup.sys_clk_update:00000000 sys_clk_update
C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s:55     .init_array:00000000 $d
C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s:58     .text.startup.main:00000000 $t
C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s:65     .text.startup.main:00000000 main
C:\Users\David\AppData\Local\Temp\ccB5X7Gf.s:354    .text.startup.main:00000094 $d

UNDEFINED SYMBOLS
SystemCoreClockUpdate
delay_init
gpio_config_mode
adc_config_seq_rgl
adc_config_ind_scan
adc_read_ind_scan
delay_ms
adc_sequencer_rgl
resbits_decode
