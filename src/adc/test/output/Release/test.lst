
output/Release/test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000400  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080005a8  080005a8  000105a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005c0  080005c0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080005c0  080005c0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005c0  080005c0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  080005c0  080005c0  000105c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005d4  080005d4  000105d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000004  080005dc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000009c  080005dc  0002009c  2**0
                  ALLOC
 11 .ccmdata      00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 12 .ccmbss       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 13 .bram         00000000  40024000  40024000  00020004  2**0
                  CONTENTS
 14 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 15 .debug_info   00001f74  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000846  00000000  00000000  00021fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    0000073d  00000000  00000000  000227ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000110  00000000  00000000  00022f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000002f0  00000000  00000000  0002303b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000134c  00000000  00000000  0002332b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00000e61  00000000  00000000  00024677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000049  00000000  00000000  000254d8  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000027c  00000000  00000000  00025524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000590 	.word	0x08000590

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08000590 	.word	0x08000590

080001e8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <SystemInit+0x10>)
 80001ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80001ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001f6:	4770      	bx	lr
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80001fc:	4a16      	ldr	r2, [pc, #88]	; (8000258 <SystemCoreClockUpdate+0x5c>)
 80001fe:	6893      	ldr	r3, [r2, #8]
 8000200:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8000204:	2b04      	cmp	r3, #4
 8000206:	d00c      	beq.n	8000222 <SystemCoreClockUpdate+0x26>
 8000208:	2b08      	cmp	r3, #8
 800020a:	d00c      	beq.n	8000226 <SystemCoreClockUpdate+0x2a>
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <SystemCoreClockUpdate+0x60>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800020e:	4a12      	ldr	r2, [pc, #72]	; (8000258 <SystemCoreClockUpdate+0x5c>)
 8000210:	4813      	ldr	r0, [pc, #76]	; (8000260 <SystemCoreClockUpdate+0x64>)
 8000212:	6892      	ldr	r2, [r2, #8]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000214:	4913      	ldr	r1, [pc, #76]	; (8000264 <SystemCoreClockUpdate+0x68>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000216:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800021a:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp;
 800021c:	40d3      	lsrs	r3, r2
 800021e:	600b      	str	r3, [r1, #0]
}
 8000220:	4770      	bx	lr
  switch (tmp)
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <SystemCoreClockUpdate+0x6c>)
 8000224:	e7f3      	b.n	800020e <SystemCoreClockUpdate+0x12>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000226:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000228:	6851      	ldr	r1, [r2, #4]
      if (pllsource != 0)
 800022a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800022e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000232:	6853      	ldr	r3, [r2, #4]
 8000234:	bf14      	ite	ne
 8000236:	4a0c      	ldrne	r2, [pc, #48]	; (8000268 <SystemCoreClockUpdate+0x6c>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000238:	4a08      	ldreq	r2, [pc, #32]	; (800025c <SystemCoreClockUpdate+0x60>)
 800023a:	fbb2 f1f1 	udiv	r1, r2, r1
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800023e:	4a06      	ldr	r2, [pc, #24]	; (8000258 <SystemCoreClockUpdate+0x5c>)
 8000240:	6852      	ldr	r2, [r2, #4]
 8000242:	f3c2 4201 	ubfx	r2, r2, #16, #2
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000246:	f3c3 1388 	ubfx	r3, r3, #6, #9
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800024a:	3201      	adds	r2, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800024c:	fb01 f303 	mul.w	r3, r1, r3
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000250:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 8000252:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
 8000256:	e7da      	b.n	800020e <SystemCoreClockUpdate+0x12>
 8000258:	40023800 	.word	0x40023800
 800025c:	00f42400 	.word	0x00f42400
 8000260:	080005a8 	.word	0x080005a8
 8000264:	20000000 	.word	0x20000000
 8000268:	007a1200 	.word	0x007a1200

0800026c <sys_clk_update>:
#define HSI_VALUE    ((uint32_t)16000000) /*!< Value of the Internal oscillator in Hz*/
#endif /* HSI_VALUE */

__CONSTRUCTOR
__FORCE_INLINE void sys_clk_update()
{
 800026c:	b508      	push	{r3, lr}
    SystemCoreClockUpdate();
 800026e:	f7ff ffc5 	bl	80001fc <SystemCoreClockUpdate>
    delay_init();
}
 8000272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay_init();
 8000276:	f000 b93d 	b.w	80004f4 <delay_init>
 800027a:	bf00      	nop

0800027c <main>:
#include "adc.h"
#include "gpio.h"
#include "delay.h"

int main (void)
{
 800027c:	b580      	push	{r7, lr}
 * ...
 * @endcode
 */
__FORCE_INLINE void rcc_clk_en_ahb1(rcc_ahb1_t mask)
{
    RCC->AHB1ENR |= mask;
 800027e:	4f24      	ldr	r7, [pc, #144]	; (8000310 <main+0x94>)
    gpio_clk_en(GPIOA_RCC);
    gpio_config_mode(GPIOA, GPIO_MODE_ANALOG, GPIO_IO0);
 8000280:	4824      	ldr	r0, [pc, #144]	; (8000314 <main+0x98>)
 8000282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* ADC clock 2 & 3 should be disabled ----------------------------------|*/
    adc_clk_dis(ADC2_RCC | ADC3_RCC);                                   /*<-|*/ /*[]*/
    adc_sequencer_rgl.sequece[0] = 0;
    adc_sequencer_rgl.sequece[1] = 17;
    adc_sequencer_rgl.sequece[2] = 16;
    adc_sequencer_rgl.lenght = 3;
 8000284:	4d24      	ldr	r5, [pc, #144]	; (8000318 <main+0x9c>)
    adc_config_seq_rgl(ADC1);
 8000286:	4c25      	ldr	r4, [pc, #148]	; (800031c <main+0xa0>)
    gpio_config_mode(GPIOA, GPIO_MODE_ANALOG, GPIO_IO0);
 8000288:	2201      	movs	r2, #1
 800028a:	4313      	orrs	r3, r2
 800028c:	2103      	movs	r1, #3
 800028e:	633b      	str	r3, [r7, #48]	; 0x30
 8000290:	f000 f89e 	bl	80003d0 <gpio_config_mode>
 * ...
 * @endcode
 */
__FORCE_INLINE void rcc_clk_en_apb2(rcc_apb2_t mask)
{
    RCC->APB2ENR |= mask;
 8000294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000296:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800029a:	647b      	str	r3, [r7, #68]	; 0x44
 * ...
 * @endcode
 */
__FORCE_INLINE void rcc_clk_dis_apb2(rcc_apb2_t mask)
{
    RCC->APB2ENR &= ~mask;
 800029c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    adc_sequencer_rgl.lenght = 3;
 800029e:	462e      	mov	r6, r5
 80002a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80002a4:	647b      	str	r3, [r7, #68]	; 0x44
 80002a6:	4b1e      	ldr	r3, [pc, #120]	; (8000320 <main+0xa4>)
 80002a8:	f846 3b12 	str.w	r3, [r6], #18
    adc_config_seq_rgl(ADC1);
 80002ac:	4620      	mov	r0, r4
 80002ae:	f000 f8c7 	bl	8000440 <adc_config_seq_rgl>

    adc_config_ind_scan(
 80002b2:	2200      	movs	r2, #0
 80002b4:	2303      	movs	r3, #3
 80002b6:	4611      	mov	r1, r2
 80002b8:	4620      	mov	r0, r4
 80002ba:	f000 f8a9 	bl	8000410 <adc_config_ind_scan>

void adc_read_ind_scan(ADC_TypeDef *adc);

__FORCE_INLINE void adc_internalch_en(adc_ich_t mask)
{
    ADC->CCR |= mask;
 80002be:	4a19      	ldr	r2, [pc, #100]	; (8000324 <main+0xa8>)
 80002c0:	6853      	ldr	r3, [r2, #4]
 80002c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002c6:	6053      	str	r3, [r2, #4]
    adc->CR2 |= ADC_CR2_ADON;
 80002c8:	68a3      	ldr	r3, [r4, #8]
    return (raw * ADC_VREF) / resbits_decode[resolution];
 80002ca:	4a17      	ldr	r2, [pc, #92]	; (8000328 <main+0xac>)
    adc->CR2 |= ADC_CR2_ADON;
 80002cc:	f043 0301 	orr.w	r3, r3, #1
    return (raw * ADC_VREF) / resbits_decode[resolution];
 80002d0:	f8b2 9000 	ldrh.w	r9, [r2]
    adc->CR2 |= ADC_CR2_ADON;
 80002d4:	60a3      	str	r3, [r4, #8]
 80002d6:	2702      	movs	r7, #2
    return (raw * ADC_VREF) / resbits_decode[resolution];
 80002d8:	f640 48e4 	movw	r8, #3300	; 0xce4
    
    adc_internalch_en(ADC_INCH_TVREF);
    adc_power_on(ADC1);

    while(1) {
        adc_read_ind_scan(ADC1);
 80002dc:	4620      	mov	r0, r4
 80002de:	f000 f8e3 	bl	80004a8 <adc_read_ind_scan>
    ADC->CCR &= ~mask;
}

__FORCE_INLINE void adc_seq_get_voltages(adc_res_t resolution)
{
    for (uint8_t i = 0; i < adc_sequencer_rgl.lenght; i++)
 80002e2:	7828      	ldrb	r0, [r5, #0]
 80002e4:	b180      	cbz	r0, 8000308 <main+0x8c>
 80002e6:	4a11      	ldr	r2, [pc, #68]	; (800032c <main+0xb0>)
 80002e8:	3801      	subs	r0, #1
 80002ea:	b2c0      	uxtb	r0, r0
 80002ec:	f102 0120 	add.w	r1, r2, #32
 80002f0:	fb17 6000 	smlabb	r0, r7, r0, r6
    return (raw * ADC_VREF) / resbits_decode[resolution];
 80002f4:	f832 3f02 	ldrh.w	r3, [r2, #2]!
    for (uint8_t i = 0; i < adc_sequencer_rgl.lenght; i++)
 80002f8:	4282      	cmp	r2, r0
    return (raw * ADC_VREF) / resbits_decode[resolution];
 80002fa:	fb08 f303 	mul.w	r3, r8, r3
 80002fe:	fbb3 f3f9 	udiv	r3, r3, r9
        adc_sequencer_rgl.voltage[i] = 
 8000302:	f841 3f04 	str.w	r3, [r1, #4]!
    for (uint8_t i = 0; i < adc_sequencer_rgl.lenght; i++)
 8000306:	d1f5      	bne.n	80002f4 <main+0x78>
        adc_seq_get_voltages(ADC_RES_12BITS);
        delay_ms(100);
 8000308:	2064      	movs	r0, #100	; 0x64
 800030a:	f000 f911 	bl	8000530 <delay_ms>
        adc_read_ind_scan(ADC1);
 800030e:	e7e5      	b.n	80002dc <main+0x60>
 8000310:	40023800 	.word	0x40023800
 8000314:	40020000 	.word	0x40020000
 8000318:	20000020 	.word	0x20000020
 800031c:	40012000 	.word	0x40012000
 8000320:	10110003 	.word	0x10110003
 8000324:	40012300 	.word	0x40012300
 8000328:	080005b8 	.word	0x080005b8
 800032c:	20000030 	.word	0x20000030

08000330 <Reset_Handler>:
 8000330:	4817      	ldr	r0, [pc, #92]	; (8000390 <LoopForever+0x4>)
 8000332:	4685      	mov	sp, r0
 8000334:	f7ff ff58 	bl	80001e8 <SystemInit>
 8000338:	4816      	ldr	r0, [pc, #88]	; (8000394 <LoopForever+0x8>)
 800033a:	4917      	ldr	r1, [pc, #92]	; (8000398 <LoopForever+0xc>)
 800033c:	4a17      	ldr	r2, [pc, #92]	; (800039c <LoopForever+0x10>)
 800033e:	2300      	movs	r3, #0
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:
 8000342:	58d4      	ldr	r4, [r2, r3]
 8000344:	50c4      	str	r4, [r0, r3]
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:
 8000348:	18c4      	adds	r4, r0, r3
 800034a:	428c      	cmp	r4, r1
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>
 800034e:	4a14      	ldr	r2, [pc, #80]	; (80003a0 <LoopForever+0x14>)
 8000350:	4c14      	ldr	r4, [pc, #80]	; (80003a4 <LoopForever+0x18>)
 8000352:	2300      	movs	r3, #0
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:
 8000356:	6013      	str	r3, [r2, #0]
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:
 800035a:	42a2      	cmp	r2, r4
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>
 800035e:	4812      	ldr	r0, [pc, #72]	; (80003a8 <LoopForever+0x1c>)
 8000360:	4912      	ldr	r1, [pc, #72]	; (80003ac <LoopForever+0x20>)
 8000362:	4a13      	ldr	r2, [pc, #76]	; (80003b0 <LoopForever+0x24>)
 8000364:	2300      	movs	r3, #0
 8000366:	e002      	b.n	800036e <LoopCopyCCMDataInit>

08000368 <CopyCCMDataInit>:
 8000368:	58d4      	ldr	r4, [r2, r3]
 800036a:	50c4      	str	r4, [r0, r3]
 800036c:	3304      	adds	r3, #4

0800036e <LoopCopyCCMDataInit>:
 800036e:	18c4      	adds	r4, r0, r3
 8000370:	428c      	cmp	r4, r1
 8000372:	d3f9      	bcc.n	8000368 <CopyCCMDataInit>
 8000374:	4a0f      	ldr	r2, [pc, #60]	; (80003b4 <LoopForever+0x28>)
 8000376:	4c10      	ldr	r4, [pc, #64]	; (80003b8 <LoopForever+0x2c>)
 8000378:	2300      	movs	r3, #0
 800037a:	e001      	b.n	8000380 <LoopFillZeroCCMbss>

0800037c <FillZeroCCMbss>:
 800037c:	6013      	str	r3, [r2, #0]
 800037e:	3204      	adds	r2, #4

08000380 <LoopFillZeroCCMbss>:
 8000380:	42a2      	cmp	r2, r4
 8000382:	d3fb      	bcc.n	800037c <FillZeroCCMbss>
 8000384:	f000 f8e0 	bl	8000548 <__libc_init_array>
 8000388:	f7ff ff78 	bl	800027c <main>

0800038c <LoopForever>:
 800038c:	e7fe      	b.n	800038c <LoopForever>
 800038e:	0000      	.short	0x0000
 8000390:	20020000 	.word	0x20020000
 8000394:	20000000 	.word	0x20000000
 8000398:	20000004 	.word	0x20000004
 800039c:	080005d8 	.word	0x080005d8
 80003a0:	20000004 	.word	0x20000004
 80003a4:	2000009c 	.word	0x2000009c
 80003a8:	10000000 	.word	0x10000000
 80003ac:	10000000 	.word	0x10000000
 80003b0:	080005dc 	.word	0x080005dc
 80003b4:	10000000 	.word	0x10000000
 80003b8:	10000000 	.word	0x10000000

080003bc <ADC_IRQHandler>:
 80003bc:	e7fe      	b.n	80003bc <ADC_IRQHandler>
	...

080003c0 <sys_clk_update>:
#define HSI_VALUE    ((uint32_t)16000000) /*!< Value of the Internal oscillator in Hz*/
#endif /* HSI_VALUE */

__CONSTRUCTOR
__FORCE_INLINE void sys_clk_update()
{
 80003c0:	b508      	push	{r3, lr}
    SystemCoreClockUpdate();
 80003c2:	f7ff ff1b 	bl	80001fc <SystemCoreClockUpdate>
    delay_init();
}
 80003c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay_init();
 80003ca:	f000 b893 	b.w	80004f4 <delay_init>
 80003ce:	bf00      	nop

080003d0 <gpio_config_mode>:
    }
}

/* Individual Modder configurator */
void gpio_config_mode (GPIO_TypeDef *gpio, gpio_mode_t mode, gpio_io_t mask)
{
 80003d0:	b530      	push	{r4, r5, lr}
 80003d2:	2300      	movs	r3, #0
    /* Enable desired gpio mode [\mode] to each IO moder configurator
       masked [\mask] of GPIO [\gpio] */
    for (uint8_t bit = 0; bit < 32; bit += 2) {
        if (mask & 0x1) {
            gpio->MODER &= ~(0x3 << bit);
 80003d4:	f04f 0e03 	mov.w	lr, #3
        if (mask & 0x1) {
 80003d8:	f012 0f01 	tst.w	r2, #1
            gpio->MODER &= ~(0x3 << bit);
 80003dc:	fa0e fc03 	lsl.w	ip, lr, r3
            gpio->MODER |= mode << bit;
        }
        mask >>= 1;
 80003e0:	ea4f 0252 	mov.w	r2, r2, lsr #1
        if (mask & 0x1) {
 80003e4:	d008      	beq.n	80003f8 <gpio_config_mode+0x28>
            gpio->MODER &= ~(0x3 << bit);
 80003e6:	6805      	ldr	r5, [r0, #0]
 80003e8:	ea25 050c 	bic.w	r5, r5, ip
 80003ec:	6005      	str	r5, [r0, #0]
            gpio->MODER |= mode << bit;
 80003ee:	6805      	ldr	r5, [r0, #0]
 80003f0:	fa01 f403 	lsl.w	r4, r1, r3
 80003f4:	432c      	orrs	r4, r5
 80003f6:	6004      	str	r4, [r0, #0]
    for (uint8_t bit = 0; bit < 32; bit += 2) {
 80003f8:	3302      	adds	r3, #2
 80003fa:	2b20      	cmp	r3, #32
 80003fc:	d1ec      	bne.n	80003d8 <gpio_config_mode+0x8>
    }
}
 80003fe:	bd30      	pop	{r4, r5, pc}

08000400 <sys_clk_update>:
{
 8000400:	b508      	push	{r3, lr}
    SystemCoreClockUpdate();
 8000402:	f7ff fefb 	bl	80001fc <SystemCoreClockUpdate>
}
 8000406:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay_init();
 800040a:	f000 b873 	b.w	80004f4 <delay_init>
 800040e:	bf00      	nop

08000410 <adc_config_ind_scan>:

void adc_config_ind_scan(
    ADC_TypeDef *adc, adc_res_t resolution, adc_align_t alignment, 
    adc_pre_t prescaler
)
{
 8000410:	b4f0      	push	{r4, r5, r6, r7}
    ADC->CCR = 0;
 8000412:	4e0a      	ldr	r6, [pc, #40]	; (800043c <adc_config_ind_scan+0x2c>)
 8000414:	2400      	movs	r4, #0
 8000416:	6074      	str	r4, [r6, #4]
    ADC->CCR |= prescaler << ADC_CCR_ADCPRE_Pos;
 8000418:	6877      	ldr	r7, [r6, #4]
 800041a:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 800041e:	6077      	str	r7, [r6, #4]

    adc->CR1 = 0;
 8000420:	6044      	str	r4, [r0, #4]
    adc->CR1 |= (resolution << ADC_CR1_RES_Pos); // | ADC_CR1_SCAN;
 8000422:	6845      	ldr	r5, [r0, #4]
 8000424:	ea45 6101 	orr.w	r1, r5, r1, lsl #24
 8000428:	6041      	str	r1, [r0, #4]

    adc->CR2 = 0;
 800042a:	6084      	str	r4, [r0, #8]
    adc->CR2 |= (alignment << ADC_CR2_ALIGN_Pos) | ADC_CR2_EOCS;
 800042c:	6883      	ldr	r3, [r0, #8]
 800042e:	ea43 22c2 	orr.w	r2, r3, r2, lsl #11
 8000432:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
}
 8000436:	bcf0      	pop	{r4, r5, r6, r7}
    adc->CR2 |= (alignment << ADC_CR2_ALIGN_Pos) | ADC_CR2_EOCS;
 8000438:	6082      	str	r2, [r0, #8]
}
 800043a:	4770      	bx	lr
 800043c:	40012300 	.word	0x40012300

08000440 <adc_config_seq_rgl>:

void adc_config_seq_rgl(ADC_TypeDef *adc)
{
 8000440:	b470      	push	{r4, r5, r6}
    adc->SQR1 = 0;
    adc->SQR2 = 0;
    adc->SQR3 = 0;
    adc->SQR1 |= ((adc_sequencer_rgl.lenght - 1) << ADC_SQR1_L_Pos);
 8000442:	4918      	ldr	r1, [pc, #96]	; (80004a4 <adc_config_seq_rgl+0x64>)
    adc->SQR1 = 0;
 8000444:	2200      	movs	r2, #0
 8000446:	62c2      	str	r2, [r0, #44]	; 0x2c
    adc->SQR1 |= ((adc_sequencer_rgl.lenght - 1) << ADC_SQR1_L_Pos);
 8000448:	780d      	ldrb	r5, [r1, #0]
    adc->SQR2 = 0;
 800044a:	6302      	str	r2, [r0, #48]	; 0x30
    adc->SQR3 = 0;
 800044c:	6342      	str	r2, [r0, #52]	; 0x34
    adc->SQR1 |= ((adc_sequencer_rgl.lenght - 1) << ADC_SQR1_L_Pos);
 800044e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000450:	1e6c      	subs	r4, r5, #1
 8000452:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8000456:	62c3      	str	r3, [r0, #44]	; 0x2c
    
    for (uint8_t i = 0; i < adc_sequencer_rgl.lenght; i++)
 8000458:	b1fd      	cbz	r5, 800049a <adc_config_seq_rgl+0x5a>
 800045a:	4613      	mov	r3, r2
 800045c:	4694      	mov	ip, r2
 800045e:	e00f      	b.n	8000480 <adc_config_seq_rgl+0x40>
    {
        if (i <= 6) {
            adc->SQR3 |= adc_sequencer_rgl.sequece[i] << (i*5);
        } else if (i <= 12) {
 8000460:	f1bc 0f0c 	cmp.w	ip, #12
 8000464:	d914      	bls.n	8000490 <adc_config_seq_rgl+0x50>
            adc->SQR2 |= adc_sequencer_rgl.sequece[i] << (i*5);
        } else {
            adc->SQR1 |= adc_sequencer_rgl.sequece[i] << (i*5);
 8000466:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8000468:	4094      	lsls	r4, r2
 800046a:	4334      	orrs	r4, r6
 800046c:	62c4      	str	r4, [r0, #44]	; 0x2c
    for (uint8_t i = 0; i < adc_sequencer_rgl.lenght; i++)
 800046e:	3301      	adds	r3, #1
 8000470:	fa5f fc83 	uxtb.w	ip, r3
 8000474:	4565      	cmp	r5, ip
 8000476:	f101 0101 	add.w	r1, r1, #1
 800047a:	f102 0205 	add.w	r2, r2, #5
 800047e:	d90c      	bls.n	800049a <adc_config_seq_rgl+0x5a>
        if (i <= 6) {
 8000480:	2b06      	cmp	r3, #6
            adc->SQR3 |= adc_sequencer_rgl.sequece[i] << (i*5);
 8000482:	784c      	ldrb	r4, [r1, #1]
        if (i <= 6) {
 8000484:	d8ec      	bhi.n	8000460 <adc_config_seq_rgl+0x20>
            adc->SQR3 |= adc_sequencer_rgl.sequece[i] << (i*5);
 8000486:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8000488:	4094      	lsls	r4, r2
 800048a:	4334      	orrs	r4, r6
 800048c:	6344      	str	r4, [r0, #52]	; 0x34
 800048e:	e7ee      	b.n	800046e <adc_config_seq_rgl+0x2e>
            adc->SQR2 |= adc_sequencer_rgl.sequece[i] << (i*5);
 8000490:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8000492:	4094      	lsls	r4, r2
 8000494:	4334      	orrs	r4, r6
 8000496:	6304      	str	r4, [r0, #48]	; 0x30
 8000498:	e7e9      	b.n	800046e <adc_config_seq_rgl+0x2e>
        }
    }

    adc->SR = 0;
 800049a:	2300      	movs	r3, #0
}
 800049c:	bc70      	pop	{r4, r5, r6}
    adc->SR = 0;
 800049e:	6003      	str	r3, [r0, #0]
}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	20000020 	.word	0x20000020

080004a8 <adc_read_ind_scan>:
}

void adc_read_ind_scan(ADC_TypeDef *adc)
{
    adc->CR2 |= ADC_CR2_SWSTART;
    for(uint8_t i = 0; i < adc_sequencer_rgl.lenght; i++)
 80004a8:	4a0d      	ldr	r2, [pc, #52]	; (80004e0 <adc_read_ind_scan+0x38>)
    adc->CR2 |= ADC_CR2_SWSTART;
 80004aa:	6881      	ldr	r1, [r0, #8]
    for(uint8_t i = 0; i < adc_sequencer_rgl.lenght; i++)
 80004ac:	7813      	ldrb	r3, [r2, #0]
    adc->CR2 |= ADC_CR2_SWSTART;
 80004ae:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80004b2:	6081      	str	r1, [r0, #8]
    for(uint8_t i = 0; i < adc_sequencer_rgl.lenght; i++)
 80004b4:	b173      	cbz	r3, 80004d4 <adc_read_ind_scan+0x2c>
 80004b6:	3b01      	subs	r3, #1
 80004b8:	f102 0112 	add.w	r1, r2, #18
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	3210      	adds	r2, #16
 80004c0:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    {
        while((adc->SR & ADC_SR_EOC) == 0);
 80004c4:	6803      	ldr	r3, [r0, #0]
 80004c6:	079b      	lsls	r3, r3, #30
 80004c8:	d5fc      	bpl.n	80004c4 <adc_read_ind_scan+0x1c>
        adc_sequencer_rgl.raw[i] = adc->DR;
 80004ca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80004cc:	f822 3f02 	strh.w	r3, [r2, #2]!
    for(uint8_t i = 0; i < adc_sequencer_rgl.lenght; i++)
 80004d0:	428a      	cmp	r2, r1
 80004d2:	d1f7      	bne.n	80004c4 <adc_read_ind_scan+0x1c>
    }
    adc->SR &= ~ADC_SR_STRT;
 80004d4:	6803      	ldr	r3, [r0, #0]
 80004d6:	f023 0310 	bic.w	r3, r3, #16
 80004da:	6003      	str	r3, [r0, #0]
}
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	20000020 	.word	0x20000020

080004e4 <sys_clk_update>:
{
 80004e4:	b508      	push	{r3, lr}
    SystemCoreClockUpdate();
 80004e6:	f7ff fe89 	bl	80001fc <SystemCoreClockUpdate>
}
 80004ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay_init();
 80004ee:	f000 b801 	b.w	80004f4 <delay_init>
 80004f2:	bf00      	nop

080004f4 <delay_init>:
uint32_t DELAY_CYCLES_US;              


void delay_init (void)
{
    DELAY_CYCLES_MS = (SystemCoreClock / 1000);
 80004f4:	4a09      	ldr	r2, [pc, #36]	; (800051c <delay_init+0x28>)
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <delay_init+0x2c>)
 80004f8:	6812      	ldr	r2, [r2, #0]
    DELAY_CYCLES_US = (DELAY_CYCLES_MS / 1000);
    DELAY_CYCLES_MS += EXTRACYCLES_PER_MS;
 80004fa:	480a      	ldr	r0, [pc, #40]	; (8000524 <delay_init+0x30>)
{
 80004fc:	b410      	push	{r4}
    DELAY_CYCLES_US = (DELAY_CYCLES_MS / 1000);
 80004fe:	4c0a      	ldr	r4, [pc, #40]	; (8000528 <delay_init+0x34>)
    DELAY_CYCLES_MS = (SystemCoreClock / 1000);
 8000500:	fba3 1302 	umull	r1, r3, r3, r2
 8000504:	099b      	lsrs	r3, r3, #6
    DELAY_CYCLES_US = (DELAY_CYCLES_MS / 1000);
 8000506:	fba4 4202 	umull	r4, r2, r4, r2
 800050a:	4908      	ldr	r1, [pc, #32]	; (800052c <delay_init+0x38>)
}
 800050c:	f85d 4b04 	ldr.w	r4, [sp], #4
    DELAY_CYCLES_US = (DELAY_CYCLES_MS / 1000);
 8000510:	0c92      	lsrs	r2, r2, #18
    DELAY_CYCLES_MS += EXTRACYCLES_PER_MS;
 8000512:	3309      	adds	r3, #9
 8000514:	6003      	str	r3, [r0, #0]
    DELAY_CYCLES_US = (DELAY_CYCLES_MS / 1000);
 8000516:	600a      	str	r2, [r1, #0]
}
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000000 	.word	0x20000000
 8000520:	10624dd3 	.word	0x10624dd3
 8000524:	20000094 	.word	0x20000094
 8000528:	431bde83 	.word	0x431bde83
 800052c:	20000098 	.word	0x20000098

08000530 <delay_ms>:

__attribute__((optimize("-Os")))
void delay_ms (uint32_t ms)
{
    do {
        register int32_t cycles_to_ms = DELAY_CYCLES_MS;
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <delay_ms+0x14>)
 8000532:	6813      	ldr	r3, [r2, #0]
        do {
            __asm("NOP");
 8000534:	bf00      	nop
            cycles_to_ms -= CYCLES_PER_MS;
 8000536:	3b05      	subs	r3, #5
        } while (cycles_to_ms > 0);
 8000538:	2b00      	cmp	r3, #0
 800053a:	dcfb      	bgt.n	8000534 <delay_ms+0x4>
    } while (--ms);
 800053c:	3801      	subs	r0, #1
 800053e:	d1f8      	bne.n	8000532 <delay_ms+0x2>
}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000094 	.word	0x20000094

08000548 <__libc_init_array>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	4d0d      	ldr	r5, [pc, #52]	; (8000580 <__libc_init_array+0x38>)
 800054c:	4c0d      	ldr	r4, [pc, #52]	; (8000584 <__libc_init_array+0x3c>)
 800054e:	1b64      	subs	r4, r4, r5
 8000550:	10a4      	asrs	r4, r4, #2
 8000552:	2600      	movs	r6, #0
 8000554:	42a6      	cmp	r6, r4
 8000556:	d109      	bne.n	800056c <__libc_init_array+0x24>
 8000558:	4d0b      	ldr	r5, [pc, #44]	; (8000588 <__libc_init_array+0x40>)
 800055a:	4c0c      	ldr	r4, [pc, #48]	; (800058c <__libc_init_array+0x44>)
 800055c:	f000 f818 	bl	8000590 <_init>
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	10a4      	asrs	r4, r4, #2
 8000564:	2600      	movs	r6, #0
 8000566:	42a6      	cmp	r6, r4
 8000568:	d105      	bne.n	8000576 <__libc_init_array+0x2e>
 800056a:	bd70      	pop	{r4, r5, r6, pc}
 800056c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000570:	4798      	blx	r3
 8000572:	3601      	adds	r6, #1
 8000574:	e7ee      	b.n	8000554 <__libc_init_array+0xc>
 8000576:	f855 3b04 	ldr.w	r3, [r5], #4
 800057a:	4798      	blx	r3
 800057c:	3601      	adds	r6, #1
 800057e:	e7f2      	b.n	8000566 <__libc_init_array+0x1e>
 8000580:	080005c0 	.word	0x080005c0
 8000584:	080005c0 	.word	0x080005c0
 8000588:	080005c0 	.word	0x080005c0
 800058c:	080005d4 	.word	0x080005d4

08000590 <_init>:
 8000590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000592:	bf00      	nop
 8000594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000596:	bc08      	pop	{r3}
 8000598:	469e      	mov	lr, r3
 800059a:	4770      	bx	lr

0800059c <_fini>:
 800059c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059e:	bf00      	nop
 80005a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005a2:	bc08      	pop	{r3}
 80005a4:	469e      	mov	lr, r3
 80005a6:	4770      	bx	lr
