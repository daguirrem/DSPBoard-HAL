ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.sys_clk_update,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	sys_clk_update:
  26              	.LFB130:
  27              		.file 1 "./include/system.h"
   1:./include/system.h **** /**
   2:./include/system.h ****  * @file system.h
   3:./include/system.h ****  * @author David A. Aguirre M. (daguirre.m@outlook.com)
   4:./include/system.h ****  * @brief System global includes and global macros / definitions / configs.
   5:./include/system.h ****  * @version d0.3
   6:./include/system.h ****  * @date 2022-05-02
   7:./include/system.h ****  * 
   8:./include/system.h ****  * @copyright MIT License, Copyright (c) 2022 David A. Aguirre M. @n @n
   9:./include/system.h ****  *
  10:./include/system.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
  11:./include/system.h ****  * of this software and associated documentation files (the "Software"), to deal
  12:./include/system.h ****  * in the Software without restriction, including without limitation the rights
  13:./include/system.h ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  14:./include/system.h ****  * copies of the Software, and to permit persons to whom the Software is
  15:./include/system.h ****  * furnished to do so, subject to the following conditions: @n @n
  16:./include/system.h ****  *
  17:./include/system.h ****  * The above copyright notice and this permission notice shall be included in all
  18:./include/system.h ****  * copies or substantial portions of the Software. @n @n
  19:./include/system.h **** 
  20:./include/system.h ****  * THE SOFTWARE IS PROVIDED  "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  21:./include/system.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  22:./include/system.h ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  23:./include/system.h ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  24:./include/system.h ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  25:./include/system.h ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  26:./include/system.h ****  * SOFTWARE.
  27:./include/system.h ****  * 
  28:./include/system.h ****  */
  29:./include/system.h **** 
  30:./include/system.h **** #ifndef _SYSTEM_H_
  31:./include/system.h **** #define _SYSTEM_H_
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 2


  32:./include/system.h **** 
  33:./include/system.h **** 
  34:./include/system.h **** #if defined(STM32F4xx)
  35:./include/system.h **** #include "stm32f4xx.h"
  36:./include/system.h **** #endif
  37:./include/system.h **** 
  38:./include/system.h **** #include "delay.h"
  39:./include/system.h **** 
  40:./include/system.h **** #define __FORCE_INLINE  __attribute__((always_inline)) static inline
  41:./include/system.h **** 
  42:./include/system.h **** #define __CCM_VAR_I __attribute__((section(".ccmdata")))
  43:./include/system.h **** #define __CCM_VAR_U __attribute__((section(".ccmbss")))
  44:./include/system.h **** #define __RAM_FUNC  __attribute__((section(".ramFunc")))
  45:./include/system.h **** 
  46:./include/system.h **** #define __CONSTRUCTOR __attribute__((constructor))
  47:./include/system.h **** 
  48:./include/system.h **** #if !defined  (HSE_VALUE) 
  49:./include/system.h **** #define HSE_VALUE    ((uint32_t)8000000) /*!< Default value of the External oscillator in Hz */
  50:./include/system.h **** #endif /* HSE_VALUE */
  51:./include/system.h **** 
  52:./include/system.h **** #if !defined  (HSI_VALUE)
  53:./include/system.h **** #define HSI_VALUE    ((uint32_t)16000000) /*!< Value of the Internal oscillator in Hz*/
  54:./include/system.h **** #endif /* HSI_VALUE */
  55:./include/system.h **** 
  56:./include/system.h **** 
  57:./include/system.h **** __CONSTRUCTOR
  58:./include/system.h **** __FORCE_INLINE
  59:./include/system.h **** void sys_clk_update(void)
  60:./include/system.h **** {
  28              		.loc 1 60 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
  61:./include/system.h ****     SystemCoreClockUpdate();
  36              		.loc 1 61 5 view .LVU1
  37 0002 FFF7FEFF 		bl	SystemCoreClockUpdate
  38              	.LVL0:
  62:./include/system.h ****     delay_init();
  39              		.loc 1 62 5 view .LVU2
  40 0006 FFF7FEFF 		bl	delay_init
  41              	.LVL1:
  63:./include/system.h **** }
  42              		.loc 1 63 1 is_stmt 0 view .LVU3
  43 000a 08BD     		pop	{r3, pc}
  44              		.cfi_endproc
  45              	.LFE130:
  47              		.section	.init_array,"aw",%init_array
  48              		.align	2
  49 0000 00000000 		.word	sys_clk_update(target1)
  50              		.section	.text.main,"ax",%progbits
  51              		.align	1
  52              		.global	main
  53              		.syntax unified
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 3


  54              		.thumb
  55              		.thumb_func
  57              	main:
  58              	.LFB159:
  59              		.file 2 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****  * @file delay_test.c
   3:src/main.c    ****  * @author David A. Aguirre M. (daguirre.m@outlook.com)
   4:src/main.c    ****  * @brief
   5:src/main.c    ****  * @version 0.1
   6:src/main.c    ****  * @date 2021-05-14
   7:src/main.c    ****  *
   8:src/main.c    ****  * @copyright Copyright (c) 2021
   9:src/main.c    ****  *
  10:src/main.c    ****  */
  11:src/main.c    **** 
  12:src/main.c    **** #include <stm32F4xx.h>
  13:src/main.c    **** #include "delay.h"
  14:src/main.c    **** #include "gpio.h"
  15:src/main.c    **** #include "rcc.h"
  16:src/main.c    **** 
  17:src/main.c    **** int main(void)
  18:src/main.c    **** {
  60              		.loc 2 18 1 is_stmt 1 view -0
  61              		.cfi_startproc
  62              		@ Volatile: function does not return.
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65 0000 08B5     		push	{r3, lr}
  66              		.cfi_def_cfa_offset 8
  67              		.cfi_offset 3, -8
  68              		.cfi_offset 14, -4
  19:src/main.c    ****     rcc_pll_param_cpte_set(100, RCC_PLLCLK_HSE);
  69              		.loc 2 19 5 view .LVU5
  70              	.LVL2:
  71              	.LBB12:
  72              	.LBI12:
  73              		.file 3 "./include/rcc.h"
   1:./include/rcc.h **** /**
   2:./include/rcc.h ****  * @file rcc.h
   3:./include/rcc.h ****  * @author David A. Aguirre M. (daguirre.m@outlook.com)
   4:./include/rcc.h ****  * @brief RCC - Custom HAL for DSP Board SDK.
   5:./include/rcc.h ****  * @version d0.2
   6:./include/rcc.h ****  * @date 2022-05-02
   7:./include/rcc.h ****  *
   8:./include/rcc.h ****  * @copyright MIT License, Copyright (c) 2022 David A. Aguirre M. @n @n
   9:./include/rcc.h ****  *
  10:./include/rcc.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
  11:./include/rcc.h ****  * of this software and associated documentation files (the "Software"), to deal
  12:./include/rcc.h ****  * in the Software without restriction, including without limitation the rights
  13:./include/rcc.h ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  14:./include/rcc.h ****  * copies of the Software, and to permit persons to whom the Software is
  15:./include/rcc.h ****  * furnished to do so, subject to the following conditions: @n @n
  16:./include/rcc.h ****  *
  17:./include/rcc.h ****  * The above copyright notice and this permission notice shall be included in all
  18:./include/rcc.h ****  * copies or substantial portions of the Software. @n @n
  19:./include/rcc.h ****  *
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 4


  20:./include/rcc.h ****  * THE SOFTWARE IS PROVIDED  "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  21:./include/rcc.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  22:./include/rcc.h ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  23:./include/rcc.h ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  24:./include/rcc.h ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  25:./include/rcc.h ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  26:./include/rcc.h ****  * SOFTWARE.
  27:./include/rcc.h ****  *
  28:./include/rcc.h ****  */
  29:./include/rcc.h **** 
  30:./include/rcc.h **** /**
  31:./include/rcc.h ****  * @todo Backupdomain control implementation
  32:./include/rcc.h ****  * @todo Clock ctrl & status implementation
  33:./include/rcc.h ****  * @todo Spread Spectrum Clock Generator implementation
  34:./include/rcc.h ****  * @todo I²S implementation
  35:./include/rcc.h ****  * @todo PLL Q Individual Compute & Set
  36:./include/rcc.h ****  * @todo APB[1,2] Individual Preescaleers Set
  37:./include/rcc.h ****  * @todo MCU Clock Output Implementation
  38:./include/rcc.h ****  * @todo RTC Preescalers implementation
  39:./include/rcc.h ****  * @todo RCC Interrupts
  40:./include/rcc.h ****  * 
  41:./include/rcc.h ****  */
  42:./include/rcc.h **** 
  43:./include/rcc.h **** #ifndef _RCC_H_
  44:./include/rcc.h **** #define _RCC_H_
  45:./include/rcc.h **** 
  46:./include/rcc.h **** #ifdef __cplusplus
  47:./include/rcc.h **** extern "C" {
  48:./include/rcc.h **** #endif
  49:./include/rcc.h **** 
  50:./include/rcc.h **** /**
  51:./include/rcc.h ****  * @addtogroup rcc RCC
  52:./include/rcc.h ****  */
  53:./include/rcc.h **** 
  54:./include/rcc.h **** /**
  55:./include/rcc.h ****  * @defgroup public_rcc Public
  56:./include/rcc.h ****  * @ingroup rcc
  57:./include/rcc.h ****  */
  58:./include/rcc.h **** 
  59:./include/rcc.h **** #include "system.h"
  60:./include/rcc.h **** 
  61:./include/rcc.h **** /*----------------------------------------------------------------------------*/
  62:./include/rcc.h **** /* Enums*/
  63:./include/rcc.h **** /*----------------------------------------------------------------------------*/
  64:./include/rcc.h **** 
  65:./include/rcc.h **** /**
  66:./include/rcc.h ****  * @ingroup public_rcc
  67:./include/rcc.h ****  * @brief System core clocks.
  68:./include/rcc.h ****  *
  69:./include/rcc.h ****  * Source clocks than can be configured as Systen core clock.
  70:./include/rcc.h ****  */
  71:./include/rcc.h **** typedef enum
  72:./include/rcc.h **** {
  73:./include/rcc.h ****     RCC_SYSCLK_HSI  = RCC_CR_HSION, /*!< System core clock from hsi source*/
  74:./include/rcc.h ****     RCC_SYSCLK_HSE  = RCC_CR_HSEON, /*!< System core clock from hse source*/
  75:./include/rcc.h ****     RCC_SYSCLK_PLL  = RCC_CR_PLLON, /*!< System core clock from pll source*/
  76:./include/rcc.h ****     RCC_SYSCLK_END /*!< End of rcc_sysclk enum */
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 5


  77:./include/rcc.h **** } rcc_sysclk_t;
  78:./include/rcc.h **** 
  79:./include/rcc.h **** /**
  80:./include/rcc.h ****  * @ingroup public_rcc
  81:./include/rcc.h ****  * @brief PLL surce clocks.
  82:./include/rcc.h ****  *
  83:./include/rcc.h ****  * Source clocks than can be configured as PLL Input clock source.
  84:./include/rcc.h ****  */
  85:./include/rcc.h **** typedef enum
  86:./include/rcc.h **** {
  87:./include/rcc.h ****     RCC_PLLCLK_HSI  = RCC_PLLCFGR_PLLSRC_HSI, /*!< PLL input clock from hsi source*/
  88:./include/rcc.h ****     RCC_PLLCLK_HSE  = RCC_PLLCFGR_PLLSRC_HSE, /*!< PLL input clock from hse source*/
  89:./include/rcc.h ****     RCC_PLLCLK_NONE = 0xFFFFFFFE, /*!< PLL disable input */
  90:./include/rcc.h ****     RCC_PLLCLK_END /*!< End of rcc_pllclk enum */
  91:./include/rcc.h **** } rcc_pllclk_t;
  92:./include/rcc.h **** 
  93:./include/rcc.h **** /**
  94:./include/rcc.h ****  * @ingroup public_rcc
  95:./include/rcc.h ****  * @brief AHB1 peripherals masks.
  96:./include/rcc.h ****  *
  97:./include/rcc.h ****  * Peripherals mask at AHB1 BUS.
  98:./include/rcc.h ****  */
  99:./include/rcc.h **** typedef enum
 100:./include/rcc.h **** {
 101:./include/rcc.h ****     RCC_AHB1_GPIOA      = RCC_AHB1ENR_GPIOAEN,      /*!< GPIOA Enable mask */
 102:./include/rcc.h ****     RCC_AHB1_GPIOB      = RCC_AHB1ENR_GPIOBEN,      /*!< GPIOB Enable mask */
 103:./include/rcc.h ****     RCC_AHB1_GPIOC      = RCC_AHB1ENR_GPIOCEN,      /*!< GPIOC Enable mask */
 104:./include/rcc.h ****     RCC_AHB1_GPIOD      = RCC_AHB1ENR_GPIODEN,      /*!< GPIOD Enable mask */
 105:./include/rcc.h ****     RCC_AHB1_GPIOE      = RCC_AHB1ENR_GPIOEEN,      /*!< GPIOE Enable mask */
 106:./include/rcc.h ****     RCC_AHB1_GPIOF      = RCC_AHB1ENR_GPIOFEN,      /*!< GPIOF Enable mask */
 107:./include/rcc.h ****     RCC_AHB1_GPIOG      = RCC_AHB1ENR_GPIOGEN,      /*!< GPIOG Enable mask */
 108:./include/rcc.h ****     RCC_AHB1_GPIOH      = RCC_AHB1ENR_GPIOHEN,      /*!< GPIOH Enable mask */
 109:./include/rcc.h ****     RCC_AHB1_GPIOI      = RCC_AHB1ENR_GPIOIEN,      /*!< GPIOI Enable mask */
 110:./include/rcc.h ****     RCC_AHB1_CRC        = RCC_AHB1ENR_CRCEN,        /*!< CRC Enable mask */
 111:./include/rcc.h ****     RCC_AHB1_BKPSRAM    = RCC_AHB1ENR_BKPSRAMEN,    /*!< BKPSRAM Enable mask */
 112:./include/rcc.h ****     RCC_AHB1_CCMDATA    = RCC_AHB1ENR_CCMDATARAMEN, /*!< CCMDATA Enable mask */
 113:./include/rcc.h ****     RCC_AHB1_DMA1       = RCC_AHB1ENR_DMA1EN,       /*!< DMA1 Enable mask */
 114:./include/rcc.h ****     RCC_AHB1_DMA2       = RCC_AHB1ENR_DMA2EN,       /*!< DMA2 Enable mask */
 115:./include/rcc.h ****     RCC_AHB1_ETHMAC     = RCC_AHB1ENR_ETHMACEN,     /*!< ETHMAC Enable mask */
 116:./include/rcc.h ****     RCC_AHB1_ETHMACTX   = RCC_AHB1ENR_ETHMACTXEN,   /*!< ETHMACTX Enable mask */
 117:./include/rcc.h ****     RCC_AHB1_ETHMACRX   = RCC_AHB1ENR_ETHMACRXEN,   /*!< ETHMACRX Enable mask */
 118:./include/rcc.h ****     RCC_AHB1_ETHMACPTP  = RCC_AHB1ENR_ETHMACPTPEN,  /*!< ETHMACPTP Enable mask */
 119:./include/rcc.h ****     RCC_AHB1_OTGHS      = RCC_AHB1ENR_OTGHSEN,      /*!< OTGHS Enable mask */
 120:./include/rcc.h ****     RCC_AHB1_OTGHSULPI  = RCC_AHB1ENR_OTGHSULPIEN,  /*!< OTGHS ULPI Enable mask */
 121:./include/rcc.h ****     RCC_AHB1_END /*!< End of rcc_ahb1 enum */
 122:./include/rcc.h **** } rcc_ahb1_t;
 123:./include/rcc.h **** 
 124:./include/rcc.h **** /**
 125:./include/rcc.h ****  * @ingroup public_rcc
 126:./include/rcc.h ****  * @brief AHB2 peripherals masks.
 127:./include/rcc.h ****  *
 128:./include/rcc.h ****  * Peripherals mask at AHB2 BUS.
 129:./include/rcc.h ****  */
 130:./include/rcc.h **** typedef enum
 131:./include/rcc.h **** {
 132:./include/rcc.h ****     RCC_AHB2_DCMI   = RCC_AHB2ENR_DCMIEN,   /*!< DCMI Enable mask */
 133:./include/rcc.h **** #if defined(RCC_AHB2ENR_CRYPEN)
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 6


 134:./include/rcc.h ****     RCC_AHB2_CRYP   = RCC_AHB2ENR_CRYPEN,   /*!< CRYP Enable mask */
 135:./include/rcc.h **** #endif /* defined(RCC_AHB2ENR_CRYPEN) */
 136:./include/rcc.h **** #if defined(RCC_AHB2ENR_HASHEN)
 137:./include/rcc.h ****     RCC_AHB2_HASH   = RCC_AHB2ENR_HASHEN,   /*!< HASH Enable mask */ 
 138:./include/rcc.h **** #endif /* defined(RCC_AHB2ENR_HASHEN) */
 139:./include/rcc.h ****     RCC_AHB2_RNG    = RCC_AHB2ENR_RNGEN,    /*!< RNG Enable mask */
 140:./include/rcc.h ****     RCC_AHB2_OTGFS  = RCC_AHB2ENR_OTGFSEN,  /*!< OTGFS Enable mask */
 141:./include/rcc.h ****     RCC_AHB2_END /*!< End of rcc_ahb2 enum */
 142:./include/rcc.h **** } rcc_ahb2_t;
 143:./include/rcc.h **** 
 144:./include/rcc.h **** /**
 145:./include/rcc.h ****  * @ingroup public_rcc
 146:./include/rcc.h ****  * @brief AHB3 peripherals masks.
 147:./include/rcc.h ****  *
 148:./include/rcc.h ****  * Peripherals mask at AHB3 BUS.
 149:./include/rcc.h ****  */
 150:./include/rcc.h **** typedef enum
 151:./include/rcc.h **** {
 152:./include/rcc.h ****     RCC_AHB3_FSMC   = RCC_AHB3ENR_FSMCEN,   /*!< FSMC Enable mask */
 153:./include/rcc.h ****     RCC_AHB3_END /*!< End of rcc_ahb3 enum */
 154:./include/rcc.h **** } rcc_ahb3_t;
 155:./include/rcc.h **** 
 156:./include/rcc.h **** /**
 157:./include/rcc.h ****  * @ingroup public_rcc
 158:./include/rcc.h ****  * @brief APB1 peripherals masks.
 159:./include/rcc.h ****  *
 160:./include/rcc.h ****  * Peripherals mask at APB1 BUS.
 161:./include/rcc.h ****  */
 162:./include/rcc.h **** typedef enum
 163:./include/rcc.h **** {
 164:./include/rcc.h ****     RCC_APB1_TIM2   = RCC_APB1ENR_TIM2EN,   /*!< TIM2 Enable mask */
 165:./include/rcc.h ****     RCC_APB1_TIM3   = RCC_APB1ENR_TIM3EN,   /*!< TIM3 Enable mask */
 166:./include/rcc.h ****     RCC_APB1_TIM4   = RCC_APB1ENR_TIM4EN,   /*!< TIM4 Enable mask */
 167:./include/rcc.h ****     RCC_APB1_TIM5   = RCC_APB1ENR_TIM5EN,   /*!< TIM5 Enable mask */
 168:./include/rcc.h ****     RCC_APB1_TIM6   = RCC_APB1ENR_TIM6EN,   /*!< TIM6 Enable mask */
 169:./include/rcc.h ****     RCC_APB1_TIM7   = RCC_APB1ENR_TIM7EN,   /*!< TIM7 Enable mask */
 170:./include/rcc.h ****     RCC_APB1_TIM12  = RCC_APB1ENR_TIM12EN,  /*!< TIM12 Enable mask */
 171:./include/rcc.h ****     RCC_APB1_TIM13  = RCC_APB1ENR_TIM13EN,  /*!< TIM13 Enable mask */
 172:./include/rcc.h ****     RCC_APB1_TIM14  = RCC_APB1ENR_TIM14EN,  /*!< TIM14 Enable mask */
 173:./include/rcc.h ****     RCC_APB1_WWDG   = RCC_APB1ENR_WWDGEN,   /*!< WWDG Enable mask */
 174:./include/rcc.h ****     RCC_APB1_SPI2   = RCC_APB1ENR_SPI2EN,   /*!< SPI2 Enable mask */
 175:./include/rcc.h ****     RCC_APB1_SPI3   = RCC_APB1ENR_SPI3EN,   /*!< SPI3 Enable mask */
 176:./include/rcc.h ****     RCC_APB1_USART2 = RCC_APB1ENR_USART2EN, /*!< USART2 Enable mask */
 177:./include/rcc.h ****     RCC_APB1_USART3 = RCC_APB1ENR_USART3EN, /*!< USART3 Enable mask */
 178:./include/rcc.h ****     RCC_APB1_UART4  = RCC_APB1ENR_UART4EN,  /*!< UART4 Enable mask */
 179:./include/rcc.h ****     RCC_APB1_UART5  = RCC_APB1ENR_UART5EN,  /*!< UART5 Enable mask */
 180:./include/rcc.h ****     RCC_APB1_I2C1   = RCC_APB1ENR_I2C1EN,   /*!< I2C1 Enable mask */
 181:./include/rcc.h ****     RCC_APB1_I2C2   = RCC_APB1ENR_I2C2EN,   /*!< I2C2 Enable mask */
 182:./include/rcc.h ****     RCC_APB1_I2C3   = RCC_APB1ENR_I2C3EN,   /*!< I2C3 Enable mask */
 183:./include/rcc.h ****     RCC_APB1_CAN1   = RCC_APB1ENR_CAN1EN,   /*!< CAN1 Enable mask */
 184:./include/rcc.h ****     RCC_APB1_CAN2   = RCC_APB1ENR_CAN2EN,   /*!< CAN2 Enable mask */
 185:./include/rcc.h ****     RCC_APB1_PWR    = RCC_APB1ENR_PWREN,    /*!< PWR Enable mask */
 186:./include/rcc.h ****     RCC_APB1_DAC    = RCC_APB1ENR_DACEN,    /*!< DAC Enable mask */
 187:./include/rcc.h ****     RCC_APB1_END /*!< End of rcc_apb1 enum */
 188:./include/rcc.h **** } rcc_apb1_t;
 189:./include/rcc.h **** 
 190:./include/rcc.h **** /**
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 7


 191:./include/rcc.h ****  * @ingroup public_rcc
 192:./include/rcc.h ****  * @brief APB2 peripherals masks.
 193:./include/rcc.h ****  *
 194:./include/rcc.h ****  * Peripherals mask at APB2 BUS.
 195:./include/rcc.h ****  */
 196:./include/rcc.h **** typedef enum
 197:./include/rcc.h **** {
 198:./include/rcc.h ****     RCC_APB2_TIM1   = RCC_APB2ENR_TIM1EN,   /*!< TIM1 Enable mask */
 199:./include/rcc.h ****     RCC_APB2_TIM8   = RCC_APB2ENR_TIM8EN,   /*!< TIM8 Enable mask */
 200:./include/rcc.h ****     RCC_APB2_USART1 = RCC_APB2ENR_USART1EN, /*!< USART1 Enable mask */
 201:./include/rcc.h ****     RCC_APB2_USART6 = RCC_APB2ENR_USART6EN, /*!< USART6 Enable mask */
 202:./include/rcc.h ****     RCC_APB2_ADC1   = RCC_APB2ENR_ADC1EN,   /*!< ADC1 Enable mask */
 203:./include/rcc.h ****     RCC_APB2_ADC2   = RCC_APB2ENR_ADC2EN,   /*!< ADC2 Enable mask */
 204:./include/rcc.h ****     RCC_APB2_ADC3   = RCC_APB2ENR_ADC3EN,   /*!< ADC3 Enable mask */
 205:./include/rcc.h ****     RCC_APB2_SDIO   = RCC_APB2ENR_SDIOEN,   /*!< SDIO Enable mask */
 206:./include/rcc.h ****     RCC_APB2_SPI1   = RCC_APB2ENR_SPI1EN,   /*!< SPI1 Enable mask */
 207:./include/rcc.h ****     RCC_APB2_SYSCFG = RCC_APB2ENR_SYSCFGEN, /*!< SYSCFG Enable mask */
 208:./include/rcc.h ****     RCC_APB2_TIM9   = RCC_APB2ENR_TIM9EN,   /*!< TIM9 Enable mask */
 209:./include/rcc.h ****     RCC_APB2_TIM10  = RCC_APB2ENR_TIM10EN,  /*!< TIM10 Enable mask */
 210:./include/rcc.h ****     RCC_APB2_TIM11  = RCC_APB2ENR_TIM11EN,  /*!< TIM11 Enable mask */
 211:./include/rcc.h ****     RCC_APB2_END /*!< End of rcc_apb2 enum */
 212:./include/rcc.h **** } rcc_apb2_t;
 213:./include/rcc.h **** 
 214:./include/rcc.h **** /*----------------------------------------------------------------------------*/
 215:./include/rcc.h **** /* Functions */
 216:./include/rcc.h **** /*----------------------------------------------------------------------------*/
 217:./include/rcc.h **** 
 218:./include/rcc.h **** /** ### rcc:system_core_clock:select
 219:./include/rcc.h ****  * @ingroup public_rcc
 220:./include/rcc.h ****  * @brief Select and inicializate the system core clock.
 221:./include/rcc.h ****  *
 222:./include/rcc.h ****  * Switch the system core clock source to a target 'source'.
 223:./include/rcc.h ****  *
 224:./include/rcc.h ****  * @param[in] source System target source clock.
 225:./include/rcc.h ****  *
 226:./include/rcc.h ****  * @return None.
 227:./include/rcc.h ****  * 
 228:./include/rcc.h ****  * @note 1. If a PLL is the target clock you must define the PLL source clock with
 229:./include/rcc.h ****  *       an OR operator.
 230:./include/rcc.h ****  * 
 231:./include/rcc.h ****  * @note 2. If a PLL is the target clock you must fisrt compute the PLL parameters
 232:./include/rcc.h ****  *       and set it before switch the system core clock.
 233:./include/rcc.h ****  * 
 234:./include/rcc.h ****  * @note 3. Others clocks will be deactivated after call this function.
 235:./include/rcc.h ****  *
 236:./include/rcc.h ****  * E.g.
 237:./include/rcc.h ****  * * For HSE or HSI:
 238:./include/rcc.h ****  * @code
 239:./include/rcc.h ****  * ...
 240:./include/rcc.h ****  * // This enable and switch the system core clock to HSE target
 241:./include/rcc.h ****  * rcc_sysclk_select(RCC_SYSCLK_HSE);
 242:./include/rcc.h ****  * ...
 243:./include/rcc.h ****  * @endcode
 244:./include/rcc.h ****  * * For PLL:
 245:./include/rcc.h ****  * @code
 246:./include/rcc.h ****  * ...
 247:./include/rcc.h ****  * // This enable and switch the system core clock to PLL target with
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 8


 248:./include/rcc.h ****  * // HSE as input PLL clock
 249:./include/rcc.h ****  * rcc_sysclk_select(RCC_SYSCLK_PLL | RCC_SYSCLK_HSE);
 250:./include/rcc.h ****  * ...
 251:./include/rcc.h ****  * @endcode
 252:./include/rcc.h ****  */
 253:./include/rcc.h **** void rcc_sysclk_select(rcc_sysclk_t source);
 254:./include/rcc.h **** 
 255:./include/rcc.h **** /** ### rcc:pll:parameter:compute
 256:./include/rcc.h ****  * @ingroup public_rcc
 257:./include/rcc.h ****  * @brief Compute PLL configuration parameters.
 258:./include/rcc.h ****  *
 259:./include/rcc.h ****  * Compute M,N,P and Q PLL parameters from the desired clock for the PLL and save
 260:./include/rcc.h ****  * them on static internal variable [pll_parameters].
 261:./include/rcc.h ****  *
 262:./include/rcc.h ****  * @param[in] pll_clk_out Desired PLL clock [MHz].
 263:./include/rcc.h ****  * @param[in] pll_clk_in PLL source input clock.
 264:./include/rcc.h ****  *
 265:./include/rcc.h ****  * @return None.
 266:./include/rcc.h ****  *
 267:./include/rcc.h ****  * @note Always Q parameter will compute to get a 48 MHz PLL48CK clock, if you
 268:./include/rcc.h ****  *       need less you must call rcc_pll_param_q_set function.
 269:./include/rcc.h ****  *
 270:./include/rcc.h ****  * E.g.
 271:./include/rcc.h ****  * @code
 272:./include/rcc.h ****  * ...
 273:./include/rcc.h ****  * // It will calculate the parameters to get 168 MHz at PLL output with HSE
 274:./include/rcc.h ****  * // as input clock source to PLL
 275:./include/rcc.h ****  * rcc_pll_param_cpte(168, PLL_SRC_HSE);
 276:./include/rcc.h ****  * ...
 277:./include/rcc.h ****  * @endcode
 278:./include/rcc.h ****  */
 279:./include/rcc.h **** void rcc_pll_param_cpte(uint8_t pll_clk_out, rcc_pllclk_t pll_clk_in);
 280:./include/rcc.h **** 
 281:./include/rcc.h **** /** ### rcc:pll:parameter:set
 282:./include/rcc.h ****  * @ingroup public_rcc
 283:./include/rcc.h ****  * @brief Set PLL parameters stored on static internal variable [pll_parameters].
 284:./include/rcc.h ****  * 
 285:./include/rcc.h ****  * Set P, M, N, Q, PREAHB1 & PREAHB2 parameters on RCC_PLLCFGR Register.
 286:./include/rcc.h ****  * 
 287:./include/rcc.h ****  * @return None.
 288:./include/rcc.h ****  * E.g.
 289:./include/rcc.h ****  * @code
 290:./include/rcc.h ****  * ...
 291:./include/rcc.h ****  * // It will set the parameters stored on internal pll_paramenters variable
 292:./include/rcc.h ****  * // to PLL
 293:./include/rcc.h ****  * rcc_pll_param_set();
 294:./include/rcc.h ****  * ...
 295:./include/rcc.h ****  * @endcode
 296:./include/rcc.h ****  */
 297:./include/rcc.h **** void rcc_pll_param_set(void);
 298:./include/rcc.h **** 
 299:./include/rcc.h **** /** ### rcc:pll:parameter:clear
 300:./include/rcc.h ****  * @ingroup public_rcc
 301:./include/rcc.h ****  * @brief Clear the PLL parameters.
 302:./include/rcc.h ****  * 
 303:./include/rcc.h ****  * Clear P, M, N, Q, PREAHB1 & PREAHB2 parameters on RCC_PLLCFGR Register.
 304:./include/rcc.h ****  *
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 9


 305:./include/rcc.h ****  * @return None.
 306:./include/rcc.h ****  * 
 307:./include/rcc.h ****  * E.g.
 308:./include/rcc.h ****  * @code
 309:./include/rcc.h ****  * ...
 310:./include/rcc.h ****  * // It will clear the parameters on PLL
 311:./include/rcc.h ****  * rcc_pll_param_clr();
 312:./include/rcc.h ****  * ...
 313:./include/rcc.h ****  * @endcode
 314:./include/rcc.h ****  */
 315:./include/rcc.h **** void rcc_pll_param_clr(void);
 316:./include/rcc.h **** 
 317:./include/rcc.h **** /** ### rcc:pll:parameter:compute_and_set
 318:./include/rcc.h ****  * @ingroup public_rcc
 319:./include/rcc.h ****  * @brief Compute & set the PLL Parameters.
 320:./include/rcc.h ****  * 
 321:./include/rcc.h ****  * Call rcc_pll_param_cpte, rcc_pll_param_clr & rcc_pll_param_set functions.
 322:./include/rcc.h ****  * 
 323:./include/rcc.h ****  * @param[in] pll_clk_out Desired PLL clock [MHz].
 324:./include/rcc.h ****  * @param[in] pll_clk_in PLL source input clock.
 325:./include/rcc.h ****  * 
 326:./include/rcc.h ****  * @return None.
 327:./include/rcc.h ****  * 
 328:./include/rcc.h ****  * E.g.
 329:./include/rcc.h ****  * @code
 330:./include/rcc.h ****  * ...
 331:./include/rcc.h ****  * // It will calculate the parameters to get 168 MHz at PLL output with HSE
 332:./include/rcc.h ****  * // as input clock source to PLL and then sets to PLL registers
 333:./include/rcc.h ****  * rcc_pll_param_cpte_set(168, PLL_SRC_HSE);
 334:./include/rcc.h ****  * ...
 335:./include/rcc.h ****  * @endcode
 336:./include/rcc.h ****  */
 337:./include/rcc.h **** __FORCE_INLINE void rcc_pll_param_cpte_set(uint8_t pll_clk_out, 
  74              		.loc 3 337 21 view .LVU6
  75              	.LBB13:
 338:./include/rcc.h ****     rcc_pllclk_t pll_clk_in
 339:./include/rcc.h **** )
 340:./include/rcc.h **** {
 341:./include/rcc.h ****     rcc_pll_param_cpte(pll_clk_out, pll_clk_in);
  76              		.loc 3 341 5 view .LVU7
  77 0002 4FF48001 		mov	r1, #4194304
  78 0006 6420     		movs	r0, #100
  79 0008 FFF7FEFF 		bl	rcc_pll_param_cpte
  80              	.LVL3:
 342:./include/rcc.h ****     rcc_pll_param_clr();
  81              		.loc 3 342 5 view .LVU8
  82 000c FFF7FEFF 		bl	rcc_pll_param_clr
  83              	.LVL4:
 343:./include/rcc.h ****     rcc_pll_param_set();
  84              		.loc 3 343 5 view .LVU9
  85 0010 FFF7FEFF 		bl	rcc_pll_param_set
  86              	.LVL5:
  87              		.loc 3 343 5 is_stmt 0 view .LVU10
  88              	.LBE13:
  89              	.LBE12:
  20:src/main.c    ****     rcc_sysclk_select(RCC_SYSCLK_PLL | RCC_SYSCLK_HSE);
  90              		.loc 2 20 5 is_stmt 1 view .LVU11
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 10


  91 0014 0E48     		ldr	r0, .L6
  92 0016 FFF7FEFF 		bl	rcc_sysclk_select
  93              	.LVL6:
  21:src/main.c    ****     gpio_clock_en(GPIOA_RCC);
  94              		.loc 2 21 5 view .LVU12
  95              	.LBB14:
  96              	.LBI14:
  97              		.file 4 "./include/gpio.h"
   1:./include/gpio.h **** /**
   2:./include/gpio.h ****  * @file gpio.h
   3:./include/gpio.h ****  * @author David A. Aguirre M. (daguirre.m@outlook.com)
   4:./include/gpio.h ****  * @brief GPIO - Custom HAL for DSP Board SDK.
   5:./include/gpio.h ****  * @version d0.2
   6:./include/gpio.h ****  * @date 2022-04-30
   7:./include/gpio.h ****  * 
   8:./include/gpio.h ****  * @copyright MIT License, Copyright (c) 2022 David A. Aguirre M. @n @n
   9:./include/gpio.h ****  *
  10:./include/gpio.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
  11:./include/gpio.h ****  * of this software and associated documentation files (the "Software"), to deal
  12:./include/gpio.h ****  * in the Software without restriction, including without limitation the rights
  13:./include/gpio.h ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  14:./include/gpio.h ****  * copies of the Software, and to permit persons to whom the Software is
  15:./include/gpio.h ****  * furnished to do so, subject to the following conditions: @n @n
  16:./include/gpio.h ****  *
  17:./include/gpio.h ****  * The above copyright notice and this permission notice shall be included in all
  18:./include/gpio.h ****  * copies or substantial portions of the Software. @n @n
  19:./include/gpio.h **** 
  20:./include/gpio.h ****  * THE SOFTWARE IS PROVIDED  "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  21:./include/gpio.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  22:./include/gpio.h ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  23:./include/gpio.h ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  24:./include/gpio.h ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  25:./include/gpio.h ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  26:./include/gpio.h ****  * SOFTWARE.
  27:./include/gpio.h ****  * 
  28:./include/gpio.h ****  */
  29:./include/gpio.h **** 
  30:./include/gpio.h **** /**
  31:./include/gpio.h ****  * @todo Clock
  32:./include/gpio.h ****  *  * Reset ¿?
  33:./include/gpio.h ****  * @todo Aleternate function implementation.
  34:./include/gpio.h ****  */
  35:./include/gpio.h **** 
  36:./include/gpio.h **** #ifndef _GPIO_H_
  37:./include/gpio.h **** #define _GPIO_H_
  38:./include/gpio.h **** 
  39:./include/gpio.h **** #ifdef __cplusplus
  40:./include/gpio.h **** extern "C" {
  41:./include/gpio.h **** #endif
  42:./include/gpio.h **** 
  43:./include/gpio.h **** /**
  44:./include/gpio.h ****  * @addtogroup gpio GPIO
  45:./include/gpio.h ****  */
  46:./include/gpio.h **** 
  47:./include/gpio.h **** /**
  48:./include/gpio.h ****  * @defgroup public_gpio Public
  49:./include/gpio.h ****  * @ingroup gpio
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 11


  50:./include/gpio.h ****  */
  51:./include/gpio.h **** 
  52:./include/gpio.h **** #include "system.h"
  53:./include/gpio.h **** #include "rcc.h"
  54:./include/gpio.h **** 
  55:./include/gpio.h **** /*----------------------------------------------------------------------------*/
  56:./include/gpio.h **** /* Enums */
  57:./include/gpio.h **** /*----------------------------------------------------------------------------*/
  58:./include/gpio.h **** 
  59:./include/gpio.h **** /**
  60:./include/gpio.h ****  * @ingroup public_gpio
  61:./include/gpio.h ****  * @brief AHB1 GPIO clock mask.
  62:./include/gpio.h ****  * 
  63:./include/gpio.h ****  * GPIO mask on RCC->AHB1
  64:./include/gpio.h ****  */
  65:./include/gpio.h **** typedef enum {
  66:./include/gpio.h ****     GPIOA_RCC = RCC_AHB1_GPIOA, /*!< GPIOA enable clock mask */
  67:./include/gpio.h ****     GPIOB_RCC = RCC_AHB1_GPIOB, /*!< GPIOB enable clock mask */
  68:./include/gpio.h ****     GPIOC_RCC = RCC_AHB1_GPIOC, /*!< GPIOC enable clock mask */
  69:./include/gpio.h ****     GPIOD_RCC = RCC_AHB1_GPIOD, /*!< GPIOD enable clock mask */
  70:./include/gpio.h ****     GPIOE_RCC = RCC_AHB1_GPIOE, /*!< GPIOE enable clock mask */
  71:./include/gpio.h ****     GPIOF_RCC = RCC_AHB1_GPIOF, /*!< GPIOF enable clock mask */
  72:./include/gpio.h ****     GPIOG_RCC = RCC_AHB1_GPIOG, /*!< GPIOG enable clock mask */
  73:./include/gpio.h ****     GPIOH_RCC = RCC_AHB1_GPIOH, /*!< GPIOH enable clock mask */
  74:./include/gpio.h ****     GPIOI_RCC = RCC_AHB1_GPIOI  /*!< GPIOI enable clock mask */
  75:./include/gpio.h **** } gpio_rcc_t;
  76:./include/gpio.h **** 
  77:./include/gpio.h **** /**
  78:./include/gpio.h ****  * @ingroup public_gpio
  79:./include/gpio.h ****  * @brief GPIO pin mask.
  80:./include/gpio.h ****  * 
  81:./include/gpio.h ****  * Represents each GPIO pin (input/output).
  82:./include/gpio.h ****  */
  83:./include/gpio.h **** typedef enum {
  84:./include/gpio.h ****     GPIO_IO0   = 0x0001, /*!< IO0 mask */
  85:./include/gpio.h ****     GPIO_IO1   = 0x0002, /*!< IO1 mask */
  86:./include/gpio.h ****     GPIO_IO2   = 0x0004, /*!< IO2 mask */
  87:./include/gpio.h ****     GPIO_IO3   = 0x0008, /*!< IO3 mask */
  88:./include/gpio.h ****     GPIO_IO4   = 0x0010, /*!< IO3 mask */
  89:./include/gpio.h ****     GPIO_IO5   = 0x0020, /*!< IO4 mask */
  90:./include/gpio.h ****     GPIO_IO6   = 0x0040, /*!< IO5 mask */
  91:./include/gpio.h ****     GPIO_IO7   = 0x0080, /*!< IO6 mask */
  92:./include/gpio.h ****     GPIO_IO8   = 0x0100, /*!< IO7 mask */
  93:./include/gpio.h ****     GPIO_IO9   = 0x0200, /*!< IO8 mask */
  94:./include/gpio.h ****     GPIO_IO10  = 0x0400, /*!< IO9 mask */
  95:./include/gpio.h ****     GPIO_IO11  = 0x0800, /*!< IO10 mask */
  96:./include/gpio.h ****     GPIO_IO12  = 0x1000, /*!< IO11 mask */
  97:./include/gpio.h ****     GPIO_IO13  = 0x2000, /*!< IO12 mask */
  98:./include/gpio.h ****     GPIO_IO14  = 0x4000, /*!< IO13 mask */
  99:./include/gpio.h ****     GPIO_IO15  = 0x8000  /*!< IO14 mask */
 100:./include/gpio.h **** } gpio_io_t;
 101:./include/gpio.h **** 
 102:./include/gpio.h **** /**
 103:./include/gpio.h ****  * @ingroup public_gpio
 104:./include/gpio.h ****  * @brief GPIO configuration mask.
 105:./include/gpio.h ****  * 
 106:./include/gpio.h ****  * User defined mask to GPIO custom easy configuration.
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 12


 107:./include/gpio.h ****  * 
 108:./include/gpio.h ****  * @note 12 bit mask where: @n
 109:./include/gpio.h ****  *  0b CCCC x SS PP O MM
 110:./include/gpio.h ****  *  * C: Configurator mask bits
 111:./include/gpio.h ****  *  * S: Speed mask bits
 112:./include/gpio.h ****  *  * P: Pull mode mask bits
 113:./include/gpio.h ****  *  * O: Output mode mask bits
 114:./include/gpio.h ****  *  * M: GPIO mode mask bits
 115:./include/gpio.h ****  *  * x: none 
 116:./include/gpio.h ****  * 
 117:./include/gpio.h ****  * @note Refer product datasheet for max frequency on speed levels
 118:./include/gpio.h ****  *       pag. 117 - datasheet [Input/output AC characteristics].
 119:./include/gpio.h ****  */
 120:./include/gpio.h **** typedef enum {
 121:./include/gpio.h ****     GPIO_CONFIG_MODE_INPUT      = 0x100, /*!< GPIO input mode */
 122:./include/gpio.h ****     GPIO_CONFIG_MODE_OUTPUT     = 0x101, /*!< GPIO output mode */
 123:./include/gpio.h ****     GPIO_CONFIG_MODE_ALTERNATE  = 0x102, /*!< GPIO alternate mode */
 124:./include/gpio.h ****     GPIO_CONFIG_MODE_ANALOG     = 0x103, /*!< GPIO analog mode */
 125:./include/gpio.h ****     GPIO_CONFIG_OUTPUT_OD       = 0x200, /*!< GPIO output open drain mode */
 126:./include/gpio.h ****     GPIO_CONFIG_OUTPUT_PP       = 0x204, /*!< GPIO output push-pull mode */
 127:./include/gpio.h ****     GPIO_CONFIG_PULL_NONE       = 0x400, /*!< GPIO input none pull mode */
 128:./include/gpio.h ****     GPIO_CONFIG_PULL_UP         = 0x408, /*!< GPIO input pull-up mode */
 129:./include/gpio.h ****     GPIO_CONFIG_PULL_DOWN       = 0x410, /*!< GPIO input pull-down mode */
 130:./include/gpio.h ****     GPIO_CONFIG_SPEED_LOW       = 0x800, /*!< GPIO low speed mode */
 131:./include/gpio.h ****     GPIO_CONFIG_SPEED_MEDIUM    = 0x820, /*!< GPIO medium speed mode*/
 132:./include/gpio.h ****     GPIO_CONFIG_SPEED_HIGH      = 0x840, /*!< GPIO high speed mode */
 133:./include/gpio.h ****     GPIO_CONFIG_SPEED_VHIGH     = 0x860, /*!< GPIO very high speed mode */
 134:./include/gpio.h **** } gpio_config_t;
 135:./include/gpio.h **** 
 136:./include/gpio.h **** /**
 137:./include/gpio.h ****  * @ingroup public_gpio
 138:./include/gpio.h ****  * @brief GPIO general mode specific mask.
 139:./include/gpio.h ****  * 
 140:./include/gpio.h ****  * GPIO general configuration mode mask.
 141:./include/gpio.h ****  */
 142:./include/gpio.h **** typedef enum {
 143:./include/gpio.h ****     GPIO_MODE_INPUT     = 0x0, /*!< GPIO input mode */
 144:./include/gpio.h ****     GPIO_MODE_OUTPUT    = 0x1, /*!< GPIO output mode */
 145:./include/gpio.h ****     GPIO_MODE_ALTERNATE = 0x2, /*!< GPIO alternate mode */
 146:./include/gpio.h ****     GPIO_MODE_ANALOG    = 0x3, /*!< GPIO analog mode */
 147:./include/gpio.h **** } gpio_mode_t;
 148:./include/gpio.h **** 
 149:./include/gpio.h **** 
 150:./include/gpio.h **** /**
 151:./include/gpio.h ****  * @ingroup public_gpio
 152:./include/gpio.h ****  * @brief GPIO output mode specific mask.
 153:./include/gpio.h ****  * 
 154:./include/gpio.h ****  * GPIO output configuration mode mask.
 155:./include/gpio.h ****  */
 156:./include/gpio.h **** typedef enum {
 157:./include/gpio.h ****     GPIO_OUTPUT_PP  = 0x0, /*!< GPIO output push-pull mode */
 158:./include/gpio.h ****     GPIO_OUTPUT_OD  = 0x1  /*!< GPIO output open drain mode */
 159:./include/gpio.h **** } gpio_output_t;
 160:./include/gpio.h **** 
 161:./include/gpio.h **** /**
 162:./include/gpio.h ****  * @ingroup public_gpio
 163:./include/gpio.h ****  * @brief GPIO input pull mode specific mask.
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 13


 164:./include/gpio.h ****  * 
 165:./include/gpio.h ****  * GPIO input pull configuration mode mask.
 166:./include/gpio.h ****  */
 167:./include/gpio.h **** typedef enum {
 168:./include/gpio.h ****     GPIO_PULL_NONE  = 0x0, /*!< GPIO input none pull mode */
 169:./include/gpio.h ****     GPIO_PULL_UP    = 0x1, /*!< GPIO input pull-up mode */
 170:./include/gpio.h ****     GPIO_PULL_DOWN  = 0x2, /*!< GPIO input pull-down mode */
 171:./include/gpio.h **** } gpio_pull_t;
 172:./include/gpio.h **** 
 173:./include/gpio.h **** /**
 174:./include/gpio.h ****  * @ingroup public_gpio
 175:./include/gpio.h ****  * @brief GPIO speed mode specific mask.
 176:./include/gpio.h ****  * 
 177:./include/gpio.h ****  * GPIO speed configuration mode mask.
 178:./include/gpio.h ****  */
 179:./include/gpio.h **** typedef enum {
 180:./include/gpio.h ****     GPIO_SPEED_LOW      = 0x0, /*!< GPIO Low Speed Mode */
 181:./include/gpio.h ****     GPIO_SPEED_MEDIUM   = 0x1, /*!< GPIO Medium Speed Mode */
 182:./include/gpio.h ****     GPIO_SPEED_HIGH     = 0x2, /*!< GPIO High Speed Mode */
 183:./include/gpio.h ****     GPIO_SPEED_VHIGH    = 0x3, /*!< GPIO Very High Speed Mode */
 184:./include/gpio.h **** } gpio_speed_t;
 185:./include/gpio.h **** 
 186:./include/gpio.h **** /**
 187:./include/gpio.h ****  * @ingroup public_gpio
 188:./include/gpio.h ****  * @brief GPIO alternate function.
 189:./include/gpio.h ****  * 
 190:./include/gpio.h ****  * AFRL Register alternate function mask.
 191:./include/gpio.h ****  */
 192:./include/gpio.h **** typedef enum {
 193:./include/gpio.h ****     GPIO_ALT_AF0    = 0x00, /*!< GPIO Alternate Function 0 */
 194:./include/gpio.h ****     GPIO_ALT_AF1    = 0x01, /*!< GPIO Alternate Function 1 */
 195:./include/gpio.h ****     GPIO_ALT_AF2    = 0x02, /*!< GPIO Alternate Function 2 */
 196:./include/gpio.h ****     GPIO_ALT_AF3    = 0x03, /*!< GPIO Alternate Function 3 */
 197:./include/gpio.h ****     GPIO_ALT_AF4    = 0x04, /*!< GPIO Alternate Function 4 */
 198:./include/gpio.h ****     GPIO_ALT_AF5    = 0x05, /*!< GPIO Alternate Function 5 */
 199:./include/gpio.h ****     GPIO_ALT_AF6    = 0x06, /*!< GPIO Alternate Function 6 */
 200:./include/gpio.h ****     GPIO_ALT_AF7    = 0x07, /*!< GPIO Alternate Function 7 */
 201:./include/gpio.h ****     GPIO_ALT_AF8    = 0x08, /*!< GPIO Alternate Function 8 */
 202:./include/gpio.h ****     GPIO_ALT_AF9    = 0x09, /*!< GPIO Alternate Function 9 */
 203:./include/gpio.h ****     GPIO_ALT_AF10   = 0x0A, /*!< GPIO Alternate Function 10 */
 204:./include/gpio.h ****     GPIO_ALT_AF11   = 0x0B, /*!< GPIO Alternate Function 11 */
 205:./include/gpio.h ****     GPIO_ALT_AF12   = 0x0C, /*!< GPIO Alternate Function 12 */
 206:./include/gpio.h ****     GPIO_ALT_AF13   = 0x0D, /*!< GPIO Alternate Function 13 */
 207:./include/gpio.h ****     GPIO_ALT_AF14   = 0x0E, /*!< GPIO Alternate Function 14 */
 208:./include/gpio.h ****     GPIO_ALT_AF15   = 0x0F, /*!< GPIO Alternate Function 15 */
 209:./include/gpio.h **** } gpio_alt_t;
 210:./include/gpio.h **** 
 211:./include/gpio.h **** /*----------------------------------------------------------------------------*/
 212:./include/gpio.h **** /* Functions */
 213:./include/gpio.h **** /*----------------------------------------------------------------------------*/
 214:./include/gpio.h **** 
 215:./include/gpio.h **** 
 216:./include/gpio.h **** /** ### gpio:reset
 217:./include/gpio.h ****  * @ingroup public_gpio
 218:./include/gpio.h ****  * @brief Reset single or multiple GPIO peripheral/s.
 219:./include/gpio.h ****  * 
 220:./include/gpio.h ****  * Reset masked peripheral/s in RCC_AHB1RSTR, This will reset ALL registers
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 14


 221:./include/gpio.h ****  * associated with the target peripheral/s.
 222:./include/gpio.h ****  * 
 223:./include/gpio.h ****  * @param[in] mask GPIO mask to be reset.
 224:./include/gpio.h ****  * 
 225:./include/gpio.h ****  * @return None
 226:./include/gpio.h ****  * 
 227:./include/gpio.h ****  * @note It is a forded inline function.
 228:./include/gpio.h ****  * 
 229:./include/gpio.h ****  * @see gpio_rcc_t Mask type.
 230:./include/gpio.h ****  * @see rcc_ahb1_peripheral_clk_rst Internal rcc function.
 231:./include/gpio.h ****  * 
 232:./include/gpio.h ****  * E.g. @n
 233:./include/gpio.h ****  * * For single GPIO reset:
 234:./include/gpio.h ****  * @code
 235:./include/gpio.h ****  * ...
 236:./include/gpio.h ****  * // This reset a GPIOC peripheral.
 237:./include/gpio.h ****  * gpio_rst(GPIOC_RCC);
 238:./include/gpio.h ****  * ...
 239:./include/gpio.h ****  * @endcode
 240:./include/gpio.h ****  * * For Multiple GPIOs reset:
 241:./include/gpio.h ****  * @code
 242:./include/gpio.h ****  * ...
 243:./include/gpio.h ****  * // This reset a GPIOC & GPIOI peripherals.
 244:./include/gpio.h ****  * gpio_rst(GPIOC_RCC | GPIOI_RCC);
 245:./include/gpio.h ****  * ...
 246:./include/gpio.h ****  * @endcode
 247:./include/gpio.h ****  */
 248:./include/gpio.h **** __FORCE_INLINE void gpio_rst(gpio_rcc_t mask)
 249:./include/gpio.h **** {
 250:./include/gpio.h ****     rcc_rst_ahb1((rcc_ahb1_t) mask);
 251:./include/gpio.h **** }
 252:./include/gpio.h **** 
 253:./include/gpio.h **** /** ### gpio:clock:enable:
 254:./include/gpio.h ****  * @ingroup public_gpio
 255:./include/gpio.h ****  * @brief Enable single or multiple GPIO peripheral/s clock.
 256:./include/gpio.h ****  * 
 257:./include/gpio.h ****  * Enable clock in RCC_AHB1 to masked GPIO/s.
 258:./include/gpio.h ****  * 
 259:./include/gpio.h ****  * @param[in] mask GPIO mask to be enabled.
 260:./include/gpio.h ****  * 
 261:./include/gpio.h ****  * @return None
 262:./include/gpio.h ****  * 
 263:./include/gpio.h ****  * @note It is a forded inline function.
 264:./include/gpio.h ****  * 
 265:./include/gpio.h ****  * @see gpio_rcc_t Mask type.
 266:./include/gpio.h ****  * @see rcc_ahb1_peripheral_clk_en Internal rcc function.
 267:./include/gpio.h ****  * 
 268:./include/gpio.h ****  * E.g. @n
 269:./include/gpio.h ****  * * For single GPIO clock enable:
 270:./include/gpio.h ****  * @code
 271:./include/gpio.h ****  * ...
 272:./include/gpio.h ****  * // This enable a GPIOC clock.
 273:./include/gpio.h ****  * gpio_clock_en(GPIOC_RCC);
 274:./include/gpio.h ****  * ...
 275:./include/gpio.h ****  * @endcode
 276:./include/gpio.h ****  * * For Multiple GPIOs clock enable:
 277:./include/gpio.h ****  * @code
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 15


 278:./include/gpio.h ****  * ...
 279:./include/gpio.h ****  * // This enable a GPIOC & GPIOI clock.
 280:./include/gpio.h ****  * gpio_clock_en(GPIOC_RCC | GPIOI_RCC);
 281:./include/gpio.h ****  * ...
 282:./include/gpio.h ****  * @endcode
 283:./include/gpio.h ****  */
 284:./include/gpio.h **** __FORCE_INLINE void gpio_clock_en(gpio_rcc_t mask)
  98              		.loc 4 284 21 view .LVU13
  99              	.LBE14:
 285:./include/gpio.h **** {
 286:./include/gpio.h ****     rcc_clk_en_ahb1((rcc_ahb1_t) mask);
 100              		.loc 4 286 5 view .LVU14
 101              	.LBB17:
 102              	.LBB15:
 103              	.LBI15:
 344:./include/rcc.h **** }
 345:./include/rcc.h **** 
 346:./include/rcc.h **** /** ### rcc:clock:enable:AHB1
 347:./include/rcc.h ****  * @ingroup public_rcc
 348:./include/rcc.h ****  * @brief Enable clock to AHB1 peripherial/s.
 349:./include/rcc.h ****  * 
 350:./include/rcc.h ****  * Allow enable following clock to peripherials on RCC_APB1ENR register:
 351:./include/rcc.h ****  *  * GPIO[A,B,C...I].
 352:./include/rcc.h ****  *  * CRC.
 353:./include/rcc.h ****  *  * Backup SRAM interface.
 354:./include/rcc.h ****  *  * CCM Data RAM interface.
 355:./include/rcc.h ****  *  * DMA[1:2].
 356:./include/rcc.h ****  *  * Ethernet [MAC, TX, RX, PTP].
 357:./include/rcc.h ****  *  * USB [HS, HS_ULPI].
 358:./include/rcc.h ****  *
 359:./include/rcc.h ****  * @param[in] mask AHB1 Peripheral/s mask to be enabled.
 360:./include/rcc.h ****  * 
 361:./include/rcc.h ****  * @return None.
 362:./include/rcc.h ****  * 
 363:./include/rcc.h ****  * @note 1. You can enable multiple peripherals at time passing each of them 
 364:./include/rcc.h ****  *          with an OR operator.
 365:./include/rcc.h ****  * @note 2. It is a forced inline function.
 366:./include/rcc.h ****  * 
 367:./include/rcc.h ****  * E.g. @n
 368:./include/rcc.h ****  * For one peripheral enable:
 369:./include/rcc.h ****  * @code
 370:./include/rcc.h ****  * ...
 371:./include/rcc.h ****  * // This enable clock to GPIOA peripheral
 372:./include/rcc.h ****  * rcc_clk_en_ahb1(RCC_AHB1_GPIOA);
 373:./include/rcc.h ****  * ...
 374:./include/rcc.h ****  * @endcode
 375:./include/rcc.h ****  * For multiple peripherals enable:
 376:./include/rcc.h ****  * @code
 377:./include/rcc.h ****  * ...
 378:./include/rcc.h ****  * // This enable clock to GPIOA & GPIOB peripheral
 379:./include/rcc.h ****  * rcc_clk_en_ahb1(RCC_AHB1_GPIOA | RCC_AHB1_GPIOB);
 380:./include/rcc.h ****  * ...
 381:./include/rcc.h ****  * @endcode
 382:./include/rcc.h ****  */
 383:./include/rcc.h **** __FORCE_INLINE void rcc_clk_en_ahb1(rcc_ahb1_t mask)
 104              		.loc 3 383 21 view .LVU15
 105              	.LBB16:
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 16


 384:./include/rcc.h **** {
 385:./include/rcc.h ****     RCC->AHB1ENR |= mask;
 106              		.loc 3 385 5 view .LVU16
 107              		.loc 3 385 18 is_stmt 0 view .LVU17
 108 001a 0E4A     		ldr	r2, .L6+4
 109 001c 136B     		ldr	r3, [r2, #48]
 110 001e 43F00103 		orr	r3, r3, #1
 111 0022 1363     		str	r3, [r2, #48]
 112              	.LVL7:
 113              		.loc 3 385 18 view .LVU18
 114              	.LBE16:
 115              	.LBE15:
 116              	.LBE17:
  22:src/main.c    ****     gpio_config_mode(GPIOA, GPIO_MODE_OUTPUT, GPIO_IO6);
 117              		.loc 2 22 5 is_stmt 1 view .LVU19
 118 0024 0C4C     		ldr	r4, .L6+8
 119 0026 4022     		movs	r2, #64
 120 0028 0121     		movs	r1, #1
 121 002a 2046     		mov	r0, r4
 122 002c FFF7FEFF 		bl	gpio_config_mode
 123              	.LVL8:
  23:src/main.c    ****     gpio_config_speed(GPIOA, GPIO_SPEED_VHIGH, GPIO_IO6);
 124              		.loc 2 23 5 view .LVU20
 125 0030 4022     		movs	r2, #64
 126 0032 0321     		movs	r1, #3
 127 0034 2046     		mov	r0, r4
 128 0036 FFF7FEFF 		bl	gpio_config_speed
 129              	.LVL9:
 130              	.L4:
  24:src/main.c    ****     
  25:src/main.c    ****     while (1)
 131              		.loc 2 25 5 discriminator 1 view .LVU21
  26:src/main.c    ****     {
  27:src/main.c    ****         gpio_port_tgl(GPIOA, GPIO_IO6);
 132              		.loc 2 27 9 discriminator 1 view .LVU22
 133              	.LBB18:
 134              	.LBI18:
 287:./include/gpio.h **** }
 288:./include/gpio.h **** 
 289:./include/gpio.h **** /** ### gpio:clock:disable:
 290:./include/gpio.h ****  * @ingroup public_gpio
 291:./include/gpio.h ****  * @brief Disable single or multiple GPIO peripheral/s clock.
 292:./include/gpio.h ****  * 
 293:./include/gpio.h ****  * Disable clock in RCC_AHB1 to masked GPIO/s.
 294:./include/gpio.h ****  * 
 295:./include/gpio.h ****  * @param[in] mask GPIO mask to be disabled.
 296:./include/gpio.h ****  * 
 297:./include/gpio.h ****  * @return None
 298:./include/gpio.h ****  * 
 299:./include/gpio.h ****  * @note It is a forded inline function.
 300:./include/gpio.h ****  * 
 301:./include/gpio.h ****  * @see gpio_rcc_t Mask type.
 302:./include/gpio.h ****  * @see rcc_ahb1_peripheral_clk_dis Internal rcc function.
 303:./include/gpio.h ****  * 
 304:./include/gpio.h ****  * E.g. @n
 305:./include/gpio.h ****  * * For single GPIO clock disable:
 306:./include/gpio.h ****  * @code
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 17


 307:./include/gpio.h ****  * ...
 308:./include/gpio.h ****  * // This disable a GPIOC clock.
 309:./include/gpio.h ****  * gpio_clock_dis(GPIOC_RCC);
 310:./include/gpio.h ****  * ...
 311:./include/gpio.h ****  * @endcode
 312:./include/gpio.h ****  * * For Multiple GPIOs clock disable:
 313:./include/gpio.h ****  * @code
 314:./include/gpio.h ****  * ...
 315:./include/gpio.h ****  * // This disable a GPIOC & GPIOI clock.
 316:./include/gpio.h ****  * gpio_clock_dis(GPIOC_RCC | GPIOI_RCC);
 317:./include/gpio.h ****  * ...
 318:./include/gpio.h ****  * @endcode
 319:./include/gpio.h ****  */
 320:./include/gpio.h **** __FORCE_INLINE void gpio_clock_dis(gpio_rcc_t mask)
 321:./include/gpio.h **** {
 322:./include/gpio.h ****     rcc_clk_dis_ahb1((rcc_ahb1_t) mask);
 323:./include/gpio.h **** }
 324:./include/gpio.h **** 
 325:./include/gpio.h **** /** ### gpio:configure:all [all modes]:
 326:./include/gpio.h ****  * @ingroup public_gpio
 327:./include/gpio.h ****  * @brief Set single or multiple configuration modes for specific IO/s on 
 328:./include/gpio.h ****  * target GPIO port.
 329:./include/gpio.h ****  * 
 330:./include/gpio.h ****  * Configure full operation mode of single or multiple IO/s on a target GPIO at 
 331:./include/gpio.h ****  * same time.
 332:./include/gpio.h ****  * 
 333:./include/gpio.h ****  * @param[in] gpio Target GPIO port.
 334:./include/gpio.h ****  * @param[in] config Desired configuration mask.
 335:./include/gpio.h ****  * @param[in] mask Target IO/s mask.
 336:./include/gpio.h ****  * 
 337:./include/gpio.h ****  * @return None
 338:./include/gpio.h ****  * 
 339:./include/gpio.h ****  * @note You can set single or multiple configurations on a single or multiple
 340:./include/gpio.h ****  *       IOs at same time specifying an OR operator between IOs and/or configs.
 341:./include/gpio.h ****  * 
 342:./include/gpio.h ****  * @see gpio_config_t Config type
 343:./include/gpio.h ****  * @see gpio_io_t Mask type
 344:./include/gpio.h ****  * 
 345:./include/gpio.h ****  * E.g. @n
 346:./include/gpio.h ****  * * Single config on single pin:
 347:./include/gpio.h ****  * @code
 348:./include/gpio.h ****  * ...
 349:./include/gpio.h ****  * // This enable GPIOA[0] as input pin.
 350:./include/gpio.h ****  * gpio_config_all(GPIOA, GPIO_CONFIG_MODE_INPUT, GPIO_IO0);
 351:./include/gpio.h ****  * ...
 352:./include/gpio.h ****  * @endcode
 353:./include/gpio.h ****  * * Single config on multiple pins:
 354:./include/gpio.h ****  * @code
 355:./include/gpio.h ****  * ...
 356:./include/gpio.h ****  * // This enable GPIOA[1:0] as input pins.
 357:./include/gpio.h ****  * gpio_config_all(GPIOA, GPIO_CONFIG_MODE_INPUT, GPIO_IO0 | GPIO_IO1);
 358:./include/gpio.h ****  * ...
 359:./include/gpio.h ****  * @endcode
 360:./include/gpio.h ****  * * Multiple configs on single pin:
 361:./include/gpio.h ****  * @code
 362:./include/gpio.h ****  * ...
 363:./include/gpio.h ****  * // This enable GPIOA[0] as input pin with an pull-down mode specification.
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 18


 364:./include/gpio.h ****  * gpio_config_all(
 365:./include/gpio.h ****  *     GPIOA, 
 366:./include/gpio.h ****  *     GPIO_CONFIG_MODE_INPUT | GPIO_CONFIG_PULL_DOWN,
 367:./include/gpio.h ****  *     GPIO_IO0
 368:./include/gpio.h ****  * );
 369:./include/gpio.h ****  * ...
 370:./include/gpio.h ****  * @endcode
 371:./include/gpio.h ****  * * Multiple configs on multiple pins:
 372:./include/gpio.h ****  * @code
 373:./include/gpio.h ****  * ...
 374:./include/gpio.h ****  * // This enable GPIOA[2:0] as output pins with open-drain and low speed mode 
 375:./include/gpio.h ****  * // specifications.
 376:./include/gpio.h ****  * gpio_config_all(
 377:./include/gpio.h ****  *     GPIOA, 
 378:./include/gpio.h ****  *     GPIO_CONFIG_MODE_OUTPUT | GPIO_CONFIG_OUTPUT_OD | GPIO_CONFIG_SPEED_LOW,
 379:./include/gpio.h ****  *     GPIO_IO0 | GPIO_IO1 | GPIO_IO2
 380:./include/gpio.h ****  * );
 381:./include/gpio.h ****  * ...
 382:./include/gpio.h ****  * @endcode
 383:./include/gpio.h ****  */
 384:./include/gpio.h **** void gpio_config_all (GPIO_TypeDef *gpio, gpio_config_t config, gpio_io_t mask);
 385:./include/gpio.h **** 
 386:./include/gpio.h **** /** ### gpio:config:mode [general io mode]:
 387:./include/gpio.h ****  * @ingroup public_gpio
 388:./include/gpio.h ****  * @brief Set single or multiple IO/s operation mode of target GPIO.
 389:./include/gpio.h ****  * 
 390:./include/gpio.h ****  * Configure only the IO operation mode of single or multiple IO/s on target
 391:./include/gpio.h ****  * GPIO port at same time.
 392:./include/gpio.h ****  * 
 393:./include/gpio.h ****  * @param[in] gpio Target GPIO port.
 394:./include/gpio.h ****  * @param[in] mode Desired operation mode to configure.
 395:./include/gpio.h ****  * @param[in] mask Target IO/s mask.
 396:./include/gpio.h ****  * 
 397:./include/gpio.h ****  * @note To set multiple IOs you must specify an OR operator between IOs.
 398:./include/gpio.h ****  * 
 399:./include/gpio.h ****  * @return None
 400:./include/gpio.h ****  * 
 401:./include/gpio.h ****  * E.g. @n
 402:./include/gpio.h ****  * * Single pin:
 403:./include/gpio.h ****  * @code
 404:./include/gpio.h ****  * ...
 405:./include/gpio.h ****  * // This enable GPIOA[0] as input pin.
 406:./include/gpio.h ****  * gpio_config_mode(GPIOA, GPIO_MODE_INPUT, GPIO_IO0);
 407:./include/gpio.h ****  * ...
 408:./include/gpio.h ****  * @endcode
 409:./include/gpio.h ****  * * Multiple pins:
 410:./include/gpio.h ****  * @code
 411:./include/gpio.h ****  * ...
 412:./include/gpio.h ****  * // This enable GPIOA[9,4,0] as input pins.
 413:./include/gpio.h ****  * gpio_config_mode(GPIOA, GPIO_MODE_INPUT, GPIO_IO0 | GPIO_IO4 | GPIO_IO9);
 414:./include/gpio.h ****  * ...
 415:./include/gpio.h ****  * @endcode
 416:./include/gpio.h ****  */
 417:./include/gpio.h **** void gpio_config_mode (GPIO_TypeDef *gpio, gpio_mode_t mode, gpio_io_t mask);
 418:./include/gpio.h **** 
 419:./include/gpio.h **** /** ### gpio:configure:output:mode:
 420:./include/gpio.h ****  * @ingroup public_gpio
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 19


 421:./include/gpio.h ****  * @brief Set single or multiple IO/s output mode operation of target GPIO.
 422:./include/gpio.h ****  * 
 423:./include/gpio.h ****  * Configure only the output operation mode of single or multiple IO/s on target
 424:./include/gpio.h ****  * GPIO port at same time.
 425:./include/gpio.h ****  * 
 426:./include/gpio.h ****  * @param[in] gpio Target GPIO port.
 427:./include/gpio.h ****  * @param[in] mode Desired output mode to configure.
 428:./include/gpio.h ****  * @param[in] mask Target IO/s mask.
 429:./include/gpio.h ****  * 
 430:./include/gpio.h ****  * @return None
 431:./include/gpio.h ****  * 
 432:./include/gpio.h ****  * @note 1. To set multiple IOs you must specify an OR operator between IOs.
 433:./include/gpio.h ****  * @note 2. It is a forced inline function.
 434:./include/gpio.h ****  * 
 435:./include/gpio.h ****  * E.g. @n
 436:./include/gpio.h ****  * * Single pin:
 437:./include/gpio.h ****  * @code
 438:./include/gpio.h ****  * ...
 439:./include/gpio.h ****  * // This enable GPIOA[0] as output push-pull mode specification.
 440:./include/gpio.h ****  * gpio_config_output_mode(GPIOA, GPIO_OUTPUT_PP, GPIO_IO0);
 441:./include/gpio.h ****  * ...
 442:./include/gpio.h ****  * @endcode
 443:./include/gpio.h ****  * * Multiple pins:
 444:./include/gpio.h ****  * @code
 445:./include/gpio.h ****  * ...
 446:./include/gpio.h ****  * // This enable GPIOA[4,0] as output open-drain mode specification.
 447:./include/gpio.h ****  * gpio_config_output_mode(GPIOA, GPIO_MODE_INPUT, GPIO_IO0 | GPIO_IO4);
 448:./include/gpio.h ****  * ...
 449:./include/gpio.h ****  * @endcode
 450:./include/gpio.h ****  */
 451:./include/gpio.h **** __FORCE_INLINE void gpio_config_output_mode (
 452:./include/gpio.h ****     GPIO_TypeDef *gpio, gpio_output_t mode, gpio_io_t mask
 453:./include/gpio.h **** )
 454:./include/gpio.h **** {
 455:./include/gpio.h ****     gpio->OTYPER &= ~mask;
 456:./include/gpio.h ****     gpio->OTYPER |= mask;
 457:./include/gpio.h **** }
 458:./include/gpio.h **** 
 459:./include/gpio.h **** /** ### gpio:configure:speed:
 460:./include/gpio.h ****  * @ingroup public_gpio
 461:./include/gpio.h ****  * @brief Set single or multiple IO/s speed mode of target GPIO.
 462:./include/gpio.h ****  * 
 463:./include/gpio.h ****  * Configure only the output speed mode of single or multiple IO/s on target
 464:./include/gpio.h ****  * GPIO port at same time.
 465:./include/gpio.h ****  * 
 466:./include/gpio.h ****  * @param[in] gpio Target GPIO port.
 467:./include/gpio.h ****  * @param[in] mode Desired speed mode to configure.
 468:./include/gpio.h ****  * @param[in] mask Target IO/s mask.
 469:./include/gpio.h ****  * 
 470:./include/gpio.h ****  * @return None
 471:./include/gpio.h ****  * 
 472:./include/gpio.h ****  * @note To set multiple IOs you must specify an OR operator between IOs.
 473:./include/gpio.h ****  * 
 474:./include/gpio.h ****  * E.g. @n
 475:./include/gpio.h ****  * * Single pin:
 476:./include/gpio.h ****  * @code
 477:./include/gpio.h ****  * ...
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 20


 478:./include/gpio.h ****  * // This enable low speed output on GPIOA[0].
 479:./include/gpio.h ****  * gpio_config_speed(GPIOA, GPIO_SPEED_LOW, GPIO_IO0);
 480:./include/gpio.h ****  * ...
 481:./include/gpio.h ****  * @endcode
 482:./include/gpio.h ****  * * Multiple pins:
 483:./include/gpio.h ****  * @code
 484:./include/gpio.h ****  * ...
 485:./include/gpio.h ****  * // This enable medium output on GPIOA[0,4].
 486:./include/gpio.h ****  * gpio_config_speed(GPIOA, GPIO_SPEED_MEDIUM, GPIO_IO4 | GPIO_IO0);
 487:./include/gpio.h ****  * ...
 488:./include/gpio.h ****  * @endcode
 489:./include/gpio.h ****  */
 490:./include/gpio.h **** void gpio_config_speed (GPIO_TypeDef *gpio, gpio_speed_t speed, gpio_io_t mask);
 491:./include/gpio.h **** 
 492:./include/gpio.h **** 
 493:./include/gpio.h **** /** ### gpio:configure:input:pull:mode:
 494:./include/gpio.h ****  * @ingroup public_gpio
 495:./include/gpio.h ****  * @brief Set single or multiple IO/s input pull operation mode of target GPIO.
 496:./include/gpio.h ****  * 
 497:./include/gpio.h ****  * Configure only the input operation mode of single or multiple IO/s on target
 498:./include/gpio.h ****  * GPIO port at same time.
 499:./include/gpio.h ****  * 
 500:./include/gpio.h ****  * @param[in] gpio Target GPIO port.
 501:./include/gpio.h ****  * @param[in] mode Desired input pull mode to configure.
 502:./include/gpio.h ****  * @param[in] mask Target IO/s mask.
 503:./include/gpio.h ****  * 
 504:./include/gpio.h ****  * @return None
 505:./include/gpio.h ****  * 
 506:./include/gpio.h ****  * @note To set multiple IOs you must specify an OR operator between IOs.
 507:./include/gpio.h ****  * 
 508:./include/gpio.h ****  * E.g. @n
 509:./include/gpio.h ****  * * Single pin:
 510:./include/gpio.h ****  * @code
 511:./include/gpio.h ****  * ...
 512:./include/gpio.h ****  * // This enable GPIOA[0] as pull-down input.
 513:./include/gpio.h ****  * gpio_config_input_pull_mode(GPIOA, GPIO_PULL_DOWN, GPIO_IO0);
 514:./include/gpio.h ****  * ...
 515:./include/gpio.h ****  * @endcode
 516:./include/gpio.h ****  * * Multiple pins:
 517:./include/gpio.h ****  * @code
 518:./include/gpio.h ****  * ...
 519:./include/gpio.h ****  * // This enable GPIOA[0,4] as pull-up input.
 520:./include/gpio.h ****  * gpio_config_input_pull_mode(GPIOA, GPIO_PULL_UP, GPIO_IO0 | GPIO_IO4);
 521:./include/gpio.h ****  * ...
 522:./include/gpio.h ****  * @endcode
 523:./include/gpio.h ****  */
 524:./include/gpio.h **** void gpio_config_input_pull_mode (
 525:./include/gpio.h ****     GPIO_TypeDef *gpio, gpio_pull_t pull_mode, gpio_io_t mask
 526:./include/gpio.h **** );
 527:./include/gpio.h **** 
 528:./include/gpio.h **** /** ### gpio:config:lock
 529:./include/gpio.h ****  * @ingroup public_gpio
 530:./include/gpio.h ****  * @brief Lock the configuration IO/s on target GPIO.
 531:./include/gpio.h ****  * 
 532:./include/gpio.h ****  * Execute a lock sequence for lock the configuration of IO/s on target GPIO.
 533:./include/gpio.h ****  * 
 534:./include/gpio.h ****  * @param[in] gpio Target GPIO to be locked.
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 21


 535:./include/gpio.h ****  * @param[in] mask Target IOs to be locked.
 536:./include/gpio.h ****  * 
 537:./include/gpio.h ****  * @return '0' if lock is succesfull, '1' if does not.
 538:./include/gpio.h ****  * 
 539:./include/gpio.h ****  * @note After lock the configuration of GPIO, the GPIO can't be unclocked until
 540:./include/gpio.h ****  *       MCU is reset or GPIO peripheral is reset.
 541:./include/gpio.h ****  * 
 542:./include/gpio.h ****  * E.g @n
 543:./include/gpio.h ****  * @code
 544:./include/gpio.h ****  * ...
 545:./include/gpio.h ****  * // This will lock the config of GPIOE[15,13,7:5]
 546:./include/gpio.h ****  * gpio_config_lock(
 547:./include/gpio.h ****  *     GPIOE, GPIO_IO15 | GPIO_IO13 | GPIO_IO7 | GPIO_IO6 | GPIO_IO5
 548:./include/gpio.h ****  * );
 549:./include/gpio.h ****  * ...
 550:./include/gpio.h ****  * @endcode
 551:./include/gpio.h ****  */
 552:./include/gpio.h **** uint8_t gpio_config_lock(GPIO_TypeDef *gpio, gpio_io_t mask);
 553:./include/gpio.h **** 
 554:./include/gpio.h **** /** ### gpio:port:set:
 555:./include/gpio.h ****  * @ingroup public_gpio
 556:./include/gpio.h ****  * @brief Set to high level single or multiple outputs on target GPIO.
 557:./include/gpio.h ****  * 
 558:./include/gpio.h ****  * Write logical one to single or multiple masked IOs on GPIO_BSRR[15:0] target 
 559:./include/gpio.h ****  * register.
 560:./include/gpio.h ****  * 
 561:./include/gpio.h ****  * @param[in] gpio Target GPIO port.
 562:./include/gpio.h ****  * @param[in] mask Target output IO/s mask.
 563:./include/gpio.h ****  * 
 564:./include/gpio.h ****  * @return None 
 565:./include/gpio.h ****  * 
 566:./include/gpio.h ****  * @note 1. To set multiple IOs you must specify an OR operator between IOs.
 567:./include/gpio.h ****  * @note 2. It is a forced inline function.
 568:./include/gpio.h ****  * 
 569:./include/gpio.h ****  * E.g. @n
 570:./include/gpio.h ****  * * For single output:
 571:./include/gpio.h ****  * @code
 572:./include/gpio.h ****  * ...
 573:./include/gpio.h ****  * // This set high the GPIOA[0] output.
 574:./include/gpio.h ****  * gpio_port_set(GPIOA, GPIO_IO0);
 575:./include/gpio.h ****  * ...
 576:./include/gpio.h ****  * @endcode
 577:./include/gpio.h ****  * * For multiple output:
 578:./include/gpio.h ****  * @code
 579:./include/gpio.h ****  * ...
 580:./include/gpio.h ****  * // This set high the GPIOA[0,2] output.
 581:./include/gpio.h ****  * gpio_port_set(GPIOA, GPIO_IO0 | GPIO_IO2);
 582:./include/gpio.h ****  * ...
 583:./include/gpio.h ****  * @endcode
 584:./include/gpio.h ****  */
 585:./include/gpio.h **** __FORCE_INLINE void gpio_port_set (GPIO_TypeDef *gpio, gpio_io_t mask)
 586:./include/gpio.h **** {
 587:./include/gpio.h ****     gpio->BSRR |= mask;
 588:./include/gpio.h **** }
 589:./include/gpio.h **** 
 590:./include/gpio.h **** /** ### gpio:port:clear:
 591:./include/gpio.h ****  * @ingroup public_gpio
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 22


 592:./include/gpio.h ****  * @brief Set to low level single or multiple outputs on target GPIO.
 593:./include/gpio.h ****  * 
 594:./include/gpio.h ****  * Write logical one to single or multiple masked IOs on GPIO_BSRR[31:16] target 
 595:./include/gpio.h ****  * register.
 596:./include/gpio.h ****  * 
 597:./include/gpio.h ****  * @param[in] gpio Target GPIO port.
 598:./include/gpio.h ****  * @param[in] mask Target output IO/s mask.
 599:./include/gpio.h ****  * 
 600:./include/gpio.h ****  * @return None 
 601:./include/gpio.h ****  * 
 602:./include/gpio.h ****  * @note 1. To set multiple IOs you must specify an OR operator between IOs.
 603:./include/gpio.h ****  * @note 2. It is a forced inline function.
 604:./include/gpio.h ****  * 
 605:./include/gpio.h ****  * E.g. @n
 606:./include/gpio.h ****  * * For single output:
 607:./include/gpio.h ****  * @code
 608:./include/gpio.h ****  * ...
 609:./include/gpio.h ****  * // This set low the GPIOA[0] output.
 610:./include/gpio.h ****  * gpio_port_clr(GPIOA, GPIO_IO0);
 611:./include/gpio.h ****  * ...
 612:./include/gpio.h ****  * @endcode
 613:./include/gpio.h ****  * * For multiple output:
 614:./include/gpio.h ****  * @code
 615:./include/gpio.h ****  * ...
 616:./include/gpio.h ****  * // This set low the GPIOA[0,2] output.
 617:./include/gpio.h ****  * gpio_port_clr(GPIOA, GPIO_IO0 | GPIO_IO2);
 618:./include/gpio.h ****  * ...
 619:./include/gpio.h ****  * @endcode
 620:./include/gpio.h ****  */
 621:./include/gpio.h **** __FORCE_INLINE void gpio_port_clr (GPIO_TypeDef *gpio, gpio_io_t mask)
 622:./include/gpio.h **** {
 623:./include/gpio.h ****     gpio->BSRR |= mask << 16;
 624:./include/gpio.h **** }
 625:./include/gpio.h **** 
 626:./include/gpio.h **** /** ### gpio:port:toggle:
 627:./include/gpio.h ****  * @ingroup public_gpio
 628:./include/gpio.h ****  * @brief Toggle the output mask from GPIO.
 629:./include/gpio.h ****  * 
 630:./include/gpio.h ****  * Toggle the IO/s status of single or multiple masked IO/s on GPIO_ODR
 631:./include/gpio.h ****  * target register.
 632:./include/gpio.h ****  * 
 633:./include/gpio.h ****  * @param[in] gpio Target GPIO port.
 634:./include/gpio.h ****  * @param[in] mask Target output IO/s mask to toggle.
 635:./include/gpio.h ****  * 
 636:./include/gpio.h ****  * @return None 
 637:./include/gpio.h ****  * 
 638:./include/gpio.h ****  * @note 1. To toggle multiple IOs you must specify an OR operator between IOs.
 639:./include/gpio.h ****  * @note 2. It is a forced inline function.
 640:./include/gpio.h ****  * 
 641:./include/gpio.h ****  * E.g. @n
 642:./include/gpio.h ****  * * For single toggle:
 643:./include/gpio.h ****  * @code
 644:./include/gpio.h ****  * ...
 645:./include/gpio.h ****  * // This toggle the GPIOA[0] output.
 646:./include/gpio.h ****  * gpio_port_tgl(GPIOA, GPIO_IO0);
 647:./include/gpio.h ****  * ...
 648:./include/gpio.h ****  * @endcode
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 23


 649:./include/gpio.h ****  * * For multiple toggle:
 650:./include/gpio.h ****  * @code
 651:./include/gpio.h ****  * ...
 652:./include/gpio.h ****  * // This toggle the GPIOA[0,2] output.
 653:./include/gpio.h ****  * gpio_port_tgl(GPIOA, GPIO_IO0 | GPIO_IO2);
 654:./include/gpio.h ****  * ...
 655:./include/gpio.h ****  * @endcode
 656:./include/gpio.h ****  */
 657:./include/gpio.h **** __FORCE_INLINE void gpio_port_tgl (GPIO_TypeDef *gpio, gpio_io_t mask)
 135              		.loc 4 657 21 discriminator 1 view .LVU23
 136              	.LBB19:
 658:./include/gpio.h **** {
 659:./include/gpio.h ****     gpio->ODR ^= mask;
 137              		.loc 4 659 5 discriminator 1 view .LVU24
 138              		.loc 4 659 15 is_stmt 0 discriminator 1 view .LVU25
 139 003a 074A     		ldr	r2, .L6+8
 140 003c 5369     		ldr	r3, [r2, #20]
 141 003e 83F04003 		eor	r3, r3, #64
 142 0042 5361     		str	r3, [r2, #20]
 143              	.LVL10:
 144              		.loc 4 659 15 discriminator 1 view .LVU26
 145              	.LBE19:
 146              	.LBE18:
  28:src/main.c    ****         delay_ms(273);
 147              		.loc 2 28 9 is_stmt 1 discriminator 1 view .LVU27
 148 0044 40F21110 		movw	r0, #273
 149 0048 FFF7FEFF 		bl	delay_ms
 150              	.LVL11:
  25:src/main.c    ****     {
 151              		.loc 2 25 11 discriminator 1 view .LVU28
 152 004c F5E7     		b	.L4
 153              	.L7:
 154 004e 00BF     		.align	2
 155              	.L6:
 156 0050 00000101 		.word	16842752
 157 0054 00380240 		.word	1073887232
 158 0058 00000240 		.word	1073872896
 159              		.cfi_endproc
 160              	.LFE159:
 162              		.text
 163              	.Letext0:
 164              		.file 5 "e:\\david\\documentos\\megasync\\trabajo\\stm\\.dspboardsdk\\gcc\\arm-none-eabi\\include\
 165              		.file 6 "e:\\david\\documentos\\megasync\\trabajo\\stm\\.dspboardsdk\\gcc\\arm-none-eabi\\include\
 166              		.file 7 "E:/David/Documentos/MEGAsync/Trabajo/STM/.dspboardSDK/packs/STM32CubeF4/Drivers/CMSIS/Dev
 167              		.file 8 "./include/delay.h"
 168              		.file 9 "E:/David/Documentos/MEGAsync/Trabajo/STM/.dspboardSDK/packs/STM32CubeF4/Drivers/CMSIS/Dev
ARM GAS  C:\Users\David\AppData\Local\Temp\cct9jgTw.s 			page 24


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\David\AppData\Local\Temp\cct9jgTw.s:20     .text.sys_clk_update:00000000 $t
C:\Users\David\AppData\Local\Temp\cct9jgTw.s:25     .text.sys_clk_update:00000000 sys_clk_update
C:\Users\David\AppData\Local\Temp\cct9jgTw.s:48     .init_array:00000000 $d
C:\Users\David\AppData\Local\Temp\cct9jgTw.s:51     .text.main:00000000 $t
C:\Users\David\AppData\Local\Temp\cct9jgTw.s:57     .text.main:00000000 main
C:\Users\David\AppData\Local\Temp\cct9jgTw.s:156    .text.main:00000050 $d
                           .group:00000000 wm4.0.8ae2cdefb3613bf0ac10310855c6f0a4
                           .group:00000000 wm4.stm32F4xx.h.38.48e9021f52d9734251440390770110f2
                           .group:00000000 wm4.stm32f407xx.h.34.dfd2ea1697b5c77f46734fce8e0379c1
                           .group:00000000 wm4._newlib_version.h.4.bfdf54b0af045d4a71376ae00f63a22c
                           .group:00000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:00000000 wm4.core_cm4.h.66.e4ff136c4a17abc46741866f64f8e729
                           .group:00000000 wm4.cmsis_gcc.h.26.6774fe91202d65f4d5ffcff60e00da34
                           .group:00000000 wm4.core_cm4.h.174.059a5e001a9e729091d1407208e93224
                           .group:00000000 wm4.mpu_armv7.h.32.27b4593cb2f8d3152ca5d97a9d72b321
                           .group:00000000 wm4.stm32f407xx.h.906.0474e04c16c0cfa925d4d78494071749
                           .group:00000000 wm4.stm32F4xx.h.195.a4b8bf80f37cc96981498656ffe5f588
                           .group:00000000 wm4.system.h.40.4aceacd67e4cc399e7f522658d4cf7f5

UNDEFINED SYMBOLS
SystemCoreClockUpdate
delay_init
rcc_pll_param_cpte
rcc_pll_param_clr
rcc_pll_param_set
rcc_sysclk_select
gpio_config_mode
gpio_config_speed
delay_ms
